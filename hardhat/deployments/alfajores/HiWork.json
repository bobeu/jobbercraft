{
  "address": "0x84be07Adf374Ffa782b52Ecfd7B02fe75FF3c6d1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_initializer",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_feeTo",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "InvalidSelector",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pay",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "offer",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "TestError",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "jobId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSpotId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_trustee",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "hirer",
          "type": "address"
        }
      ],
      "name": "CompletedJob",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "jobId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountRefundToHirer",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountPaidToJobbers",
          "type": "uint256"
        }
      ],
      "name": "JobCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "jobId",
          "type": "uint256"
        }
      ],
      "name": "JobCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "jobId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "offer",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "trustee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "detail",
          "type": "string"
        }
      ],
      "name": "JobCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "jobId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8[]",
          "name": "jobbers",
          "type": "uint8[]"
        }
      ],
      "name": "RequestApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "jobId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "jobber",
          "type": "address"
        }
      ],
      "name": "Submission",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "jobId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "jobber",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "actualOffer",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "negotiatedPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposedCompletionDateInDays",
          "type": "uint256"
        }
      ],
      "name": "WorkRequested",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "jobId",
          "type": "uint256"
        }
      ],
      "name": "approveCompletion",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "jobId",
          "type": "uint256"
        },
        {
          "internalType": "uint8[]",
          "name": "selectedPositions",
          "type": "uint8[]"
        }
      ],
      "name": "approveRequests",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "becomeACurator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        }
      ],
      "name": "blacklistCurators",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "jobId",
          "type": "uint256"
        }
      ],
      "name": "cancelJob",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cancellationRate",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "curators",
      "outputs": [
        {
          "internalType": "enum Curators.Status",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "curatorsId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deleteMe",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "jobId",
          "type": "uint256"
        }
      ],
      "name": "getJobInfo",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "enum IJob.JobType",
                  "name": "jobType",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes",
                  "name": "title",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "jobRef",
                  "type": "bytes"
                },
                {
                  "internalType": "uint8",
                  "name": "signature",
                  "type": "uint8"
                },
                {
                  "internalType": "uint64",
                  "name": "datePosted",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "proposeEnd",
                  "type": "uint64"
                },
                {
                  "internalType": "uint256",
                  "name": "offerPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "hirer",
                  "type": "address"
                },
                {
                  "internalType": "enum IJob.JobStatus",
                  "name": "jStatus",
                  "type": "uint8"
                }
              ],
              "internalType": "struct IJob.Metadata",
              "name": "job",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint64",
                  "name": "proposedJobEnd",
                  "type": "uint64"
                },
                {
                  "internalType": "uint256",
                  "name": "myBestPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "identifier",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "signed",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "acceptance",
                  "type": "bool"
                }
              ],
              "internalType": "struct IJob.Jobber[]",
              "name": "requests",
              "type": "tuple[]"
            },
            {
              "internalType": "bytes[]",
              "name": "tags",
              "type": "bytes[]"
            },
            {
              "internalType": "address",
              "name": "curator",
              "type": "address"
            }
          ],
          "internalType": "struct IJob.JobMetadata",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastJobId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "jobber",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "jobId",
          "type": "uint256"
        }
      ],
      "name": "getPosition",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "jobId",
          "type": "uint256"
        }
      ],
      "name": "getRequests",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "proposedJobEnd",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "myBestPrice",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "identifier",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "signed",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "acceptance",
              "type": "bool"
            }
          ],
          "internalType": "struct IJob.Jobber[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_cancellationRate",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_minimMumOffer",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_paymentCurrency",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_jobbersContract",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "jobberContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimMumOffer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paymentCurrency",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "jobType",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "string[]",
          "name": "tags",
          "type": "string[]"
        },
        {
          "internalType": "string",
          "name": "jobRef",
          "type": "string"
        },
        {
          "internalType": "uint16",
          "name": "proposedEndDateInDays",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "offerPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "curatorId",
          "type": "uint256"
        }
      ],
      "name": "postJob",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "jobId",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "probationOfferLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "jobId",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "proposedCompletionDateInDays",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "myBestPrice",
          "type": "uint256"
        }
      ],
      "name": "requestToWork",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "newRate",
          "type": "uint8"
        }
      ],
      "name": "setCancellationRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newLimit",
          "type": "uint256"
        }
      ],
      "name": "setOfferLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newLimit",
          "type": "uint256"
        }
      ],
      "name": "setProbationOfferLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "jobId",
          "type": "uint256"
        }
      ],
      "name": "submitAndSignCompletion",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_return",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "trustees",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "viewJobs",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "enum IJob.JobType",
                  "name": "jobType",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes",
                  "name": "title",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "jobRef",
                  "type": "bytes"
                },
                {
                  "internalType": "uint8",
                  "name": "signature",
                  "type": "uint8"
                },
                {
                  "internalType": "uint64",
                  "name": "datePosted",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "proposeEnd",
                  "type": "uint64"
                },
                {
                  "internalType": "uint256",
                  "name": "offerPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "hirer",
                  "type": "address"
                },
                {
                  "internalType": "enum IJob.JobStatus",
                  "name": "jStatus",
                  "type": "uint8"
                }
              ],
              "internalType": "struct IJob.Metadata",
              "name": "job",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint64",
                  "name": "proposedJobEnd",
                  "type": "uint64"
                },
                {
                  "internalType": "uint256",
                  "name": "myBestPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "identifier",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "signed",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "acceptance",
                  "type": "bool"
                }
              ],
              "internalType": "struct IJob.Jobber[]",
              "name": "requests",
              "type": "tuple[]"
            },
            {
              "internalType": "bytes[]",
              "name": "tags",
              "type": "bytes[]"
            },
            {
              "internalType": "address",
              "name": "curator",
              "type": "address"
            }
          ],
          "internalType": "struct IJob.JobMetadata[]",
          "name": "all",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        }
      ],
      "name": "whitelistCurators",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x9638de282992130c0b04f27e4b647059a3369ac2ad171606fff37482f8e049d9",
  "receipt": {
    "to": null,
    "from": "0x85AbBd0605F9C725a1af6CA4Fb1fD4dC14dBD669",
    "contractAddress": "0x84be07Adf374Ffa782b52Ecfd7B02fe75FF3c6d1",
    "transactionIndex": 0,
    "gasUsed": "4903335",
    "logsBloom": "0x
    "blockHash": "0x8d217cd4ba11465fa1ba8f28807db30939e6b4c7b7bb17bc049906e39f262cdb",
    "transactionHash": "0x9638de282992130c0b04f27e4b647059a3369ac2ad171606fff37482f8e049d9",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 21010042,
        "transactionHash": "0x9638de282992130c0b04f27e4b647059a3369ac2ad171606fff37482f8e049d9",
        "address": "0x84be07Adf374Ffa782b52Ecfd7B02fe75FF3c6d1",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000085abbd0605f9c725a1af6ca4fb1fd4dc14dbd669"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x8d217cd4ba11465fa1ba8f28807db30939e6b4c7b7bb17bc049906e39f262cdb"
      }
    ],
    "blockNumber": 21010042,
    "cumulativeGasUsed": "4903335",
    "status": 1,
    "byzantium": true
  },
  "args": [
    50,
    "0x0E2884a840CeEbC4628Bf3D18a8b5069746c5660"
  ],
  "numDeployments": 3,
  "solcInputHash": "4e26f98cae1e2b03da51b4affb0c7577",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_initializer\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"InvalidSelector\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pay\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"offer\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"TestError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"jobId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSpotId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_trustee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"hirer\",\"type\":\"address\"}],\"name\":\"CompletedJob\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"jobId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountRefundToHirer\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountPaidToJobbers\",\"type\":\"uint256\"}],\"name\":\"JobCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"jobId\",\"type\":\"uint256\"}],\"name\":\"JobCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"jobId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"offer\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trustee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"detail\",\"type\":\"string\"}],\"name\":\"JobCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"jobId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8[]\",\"name\":\"jobbers\",\"type\":\"uint8[]\"}],\"name\":\"RequestApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"jobId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"jobber\",\"type\":\"address\"}],\"name\":\"Submission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"jobId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"jobber\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"actualOffer\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"negotiatedPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposedCompletionDateInDays\",\"type\":\"uint256\"}],\"name\":\"WorkRequested\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"jobId\",\"type\":\"uint256\"}],\"name\":\"approveCompletion\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"jobId\",\"type\":\"uint256\"},{\"internalType\":\"uint8[]\",\"name\":\"selectedPositions\",\"type\":\"uint8[]\"}],\"name\":\"approveRequests\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"becomeACurator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"}],\"name\":\"blacklistCurators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"jobId\",\"type\":\"uint256\"}],\"name\":\"cancelJob\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancellationRate\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"curators\",\"outputs\":[{\"internalType\":\"enum Curators.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"curatorsId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deleteMe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"jobId\",\"type\":\"uint256\"}],\"name\":\"getJobInfo\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"enum IJob.JobType\",\"name\":\"jobType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"title\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"jobRef\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"signature\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"datePosted\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"proposeEnd\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"offerPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"hirer\",\"type\":\"address\"},{\"internalType\":\"enum IJob.JobStatus\",\"name\":\"jStatus\",\"type\":\"uint8\"}],\"internalType\":\"struct IJob.Metadata\",\"name\":\"job\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"proposedJobEnd\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"myBestPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"identifier\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"signed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"acceptance\",\"type\":\"bool\"}],\"internalType\":\"struct IJob.Jobber[]\",\"name\":\"requests\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes[]\",\"name\":\"tags\",\"type\":\"bytes[]\"},{\"internalType\":\"address\",\"name\":\"curator\",\"type\":\"address\"}],\"internalType\":\"struct IJob.JobMetadata\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastJobId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"jobber\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"jobId\",\"type\":\"uint256\"}],\"name\":\"getPosition\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"jobId\",\"type\":\"uint256\"}],\"name\":\"getRequests\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"proposedJobEnd\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"myBestPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"identifier\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"signed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"acceptance\",\"type\":\"bool\"}],\"internalType\":\"struct IJob.Jobber[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_cancellationRate\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_minimMumOffer\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_paymentCurrency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_jobbersContract\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jobberContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimMumOffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentCurrency\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"jobType\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"tags\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"jobRef\",\"type\":\"string\"},{\"internalType\":\"uint16\",\"name\":\"proposedEndDateInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"offerPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"curatorId\",\"type\":\"uint256\"}],\"name\":\"postJob\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"jobId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"probationOfferLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"jobId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"proposedCompletionDateInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"myBestPrice\",\"type\":\"uint256\"}],\"name\":\"requestToWork\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newRate\",\"type\":\"uint8\"}],\"name\":\"setCancellationRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newLimit\",\"type\":\"uint256\"}],\"name\":\"setOfferLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newLimit\",\"type\":\"uint256\"}],\"name\":\"setProbationOfferLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"jobId\",\"type\":\"uint256\"}],\"name\":\"submitAndSignCompletion\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_return\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"trustees\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewJobs\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"enum IJob.JobType\",\"name\":\"jobType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"title\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"jobRef\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"signature\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"datePosted\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"proposeEnd\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"offerPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"hirer\",\"type\":\"address\"},{\"internalType\":\"enum IJob.JobStatus\",\"name\":\"jStatus\",\"type\":\"uint8\"}],\"internalType\":\"struct IJob.Metadata\",\"name\":\"job\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"proposedJobEnd\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"myBestPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"identifier\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"signed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"acceptance\",\"type\":\"bool\"}],\"internalType\":\"struct IJob.Jobber[]\",\"name\":\"requests\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes[]\",\"name\":\"tags\",\"type\":\"bytes[]\"},{\"internalType\":\"address\",\"name\":\"curator\",\"type\":\"address\"}],\"internalType\":\"struct IJob.JobMetadata[]\",\"name\":\"all\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"}],\"name\":\"whitelistCurators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"approveCompletion(uint256)\":{\"params\":{\"jobId\":\"- Job index.\"}},\"approveRequests(uint256,uint8[])\":{\"details\":\"Hirer accepts request (s) to work on job.\",\"params\":{\"jobId\":\"- Job index\",\"selectedPositions\":\"- List of jobbers hirer accepts  to collaborate on the job. It should contain jobbers'  position Id. Note - Caller be the creator of job at jobId - Job must be open. - There must be requests greater than 0. It is assumed Hirer has scrutinized properly, the interests shown in job at  jobId, hence, proposed completion time of each collaborator is  evaluated, and that best satisfy the hirer's interest.\"}},\"cancelJob(uint256)\":{\"details\":\"Cancels job offer @param jobId - {Job index} Note  - Caller must be the hirer of Job with valid JobId. - Caller must not be a contract address. For more info, see { Storage.sol - _removeJob }\"},\"constructor\":{\"details\":\"Initialized storage vars \",\"params\":{\"_initializer\":\": Used to set initial parameters.   The parameters can only be altered the number of times the _initializer was set.\"}},\"getJobInfo(uint256)\":{\"details\":\"Read single job from storage.\",\"params\":{\"jobId\":\"- Job index\"}},\"getPosition(address,uint256)\":{\"details\":\"See { Storage - _getPosition} \",\"params\":{\"jobId\":\"- Job index/position.\"}},\"getRequests(uint256)\":{\"details\":\"Returns list of interested participants for a job \",\"params\":{\"jobId\":\"- {job index} \"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"Halts contract execution  Note: Owner's privilege\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"postJob(uint8,string,string[],string,uint16,uint256,uint256)\":{\"details\":\"Posts new Job\",\"params\":{\"curatorId\":\": On the frontend, curators are mapped to their respective ids, Hirers may add curator service or not.\",\"jobRef\":\"- Can be Job URL or any reference to the current job.\",\"offerPrice\":\": The amount in stable coin the hirer is willing to pay for this job. Note - Hirer must have given approval to withdraw the offerPrice in cUSD, which must also be greater than minimum offer. Note : Payment currency is in cUSD. \",\"proposedEndDateInDays\":\"- Expected duration to complete the job.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"requestToWork(uint256,uint16,uint256)\":{\"details\":\"Jobbers show interest to work on a particular job\",\"params\":{\"jobId\":\"- The Job id Jobber is applying for. An id not greater than the job array  length is expected.\",\"myBestPrice\":\"- Best price jobber will accept the job. This enables better negotiation thereby protecting the interests and rights of both parties. Note: Intending Jobber applying for this job must either be on probation or approved member.  \",\"proposedCompletionDateInDays\":\"- Jobbers can propose completion date. This however should not be confused for that of the hirer. Hirer will eventually accept or reject the proposal date.  Note: The parameter \\\"proposedCompletionDateInDays\\\" should be in days e.g 7\"}},\"setCancellationRate(uint8)\":{\"details\":\"Reset cancellation fee. Note - Owner's privilege.\",\"params\":{\"newRate\":\"- Cancellation rate. Rate should not be greater than 100%.\"}},\"submitAndSignCompletion(uint256)\":{\"details\":\"Utility to submit completed jobs. Note: We enforce strict rules that ensure caller is a  valid collaborator since position of any valid collaborator will always be greater than zero.  - If there is only one collaborator, we simply set  completion and exit the program. - If collaborator is more than one, we check that caller's  signature is not appended before now, otherwise the program reverts. Note If collaborator is more than one, then minimum of 2 signatures are required to  set job state to `completed`.\",\"params\":{\"jobId\":\"- Job index/position.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"Continues contract execution  Note: Owner's privilege\"},\"viewJobs()\":{\"details\":\"Read all jobs from storage.\"},\"whitelistCurators(address[])\":{\"details\":\"Only Owner can whitelist curators. Such address must have been registered before the invocation can be  successful.\"},\"withdraw(address,uint256)\":{\"details\":\"Withdraws from this contract if any. Note - Owner's privilege.\",\"params\":{\"amount\":\"- Amount to withdraw.\",\"to\":\"- Address to send funds to.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approveCompletion(uint256)\":{\"notice\":\"Hirer confirms and approve that job at jobId was completed and final. Note - Payment (less fee) is splitted among the jobbers. o Jobbers are able to withdraw payment from the trustee. o Rewards are minted to jobbers. Function is able to handle if there was collaboration or not.\"}},\"notice\":\"ERROR CODE ---------- \\\"1\\\" : \\\"Not a member\\\". \\\"2\\\" : \\\"No interested participants yet\\\". \\\"4\\\" : \\\"Probation hit limit. \\\"6\\\" : \\\"Invalid caller\\\". \\\"7\\\" : \\\"Invalid entry\\\". \\\"8\\\" : \\\"Approval to zero address\\\". \\\"9\\\" : \\\"Already signed\\\". \\\"11\\\" : \\\"Insufficient value provided\\\". \\\"13\\\" : \\\"Time elapsed: Cannot initialize again\\\". \\\"14\\\" : \\\"Offer price less than minimumOffer\\\".  \\\"15\\\" : Only owner | curator. \\\"16\\\" : Low bal \\\"17\\\" : OnlyOwner\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/main/HiWork.sol\":\"HiWork\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/main/HiWork.sol\":{\"content\":\"// SPDX-License-Identifier: MIT \\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"./ReadOnly.sol\\\";\\r\\nimport \\\"../utils/Lib.sol\\\";\\r\\nimport \\\"../utils/SafeCall.sol\\\";\\r\\nimport \\\"./interfaces/ITrustee.sol\\\";\\r\\nimport \\\"./Trustee.sol\\\";\\r\\nimport \\\"./curators/Curators.sol\\\";\\r\\nimport \\\"../../node_modules/@openzeppelin/contracts/security/Pausable.sol\\\";\\r\\nimport \\\"../../node_modules/@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\r\\nimport \\\"../../node_modules/@openzeppelin/contracts/utils/Address.sol\\\";\\r\\n\\r\\n/**                                                     \\r\\n      @@@\\\\   @@@\\\\              @@@\\\\       @@@\\\\    @@@@@ \\\\   @@@@@@@@ \\\\   @@@\\\\  @@@\\\\\\r\\n      @@@ |  @@@ |  @@@@@@@\\\\   @@@ |      @@@ |  @@@@@@@ \\\\  @@@   @@@ )  @@@ |@@@ /\\r\\n      @@@ |  @@@ |  @@@@@@@ |  @@@ |      @@@ | @@@   @@@ | @@@  @@@ /   @@@ @@@ /\\r\\n      @@@@@@@@@@ |    @@@ _\\\\|  @@@ |      @@@ | @@@   @@@ | @@@@@@@ /    @@@@@@ /\\r\\n      @@@@@@@@@@ |    @@@ |    @@@ | @@@\\\\ @@@ | @@@   @@@ | @@@@@@  \\\\    @@@@@@ \\\\\\r\\n      @@@  _ @@@ |    @@@ |    @@@ |_@@@ |@@@ | @@@   @@@ | @@@  _@@ \\\\   @@@ @@@ \\\\\\r\\n      @@@ |  @@@ |  @@@@@@@\\\\   @@@@@  _ @@@@@ |  @@@@@@@  | @@@ | @@@ \\\\  @@@  @@@ \\\\\\r\\n      @@@ |  @@@ |  @@@@@@@ |  @@@@@ |  @@@@@ |   @@@@@  /  @@@ | @@@@ | @@@ | @@@ |\\r\\n      \\\\__\\\\|  \\\\__\\\\|  \\\\______\\\\|  \\\\____\\\\|  \\\\____\\\\|    \\\\___\\\\/   \\\\__\\\\| \\\\___\\\\| \\\\__\\\\| \\\\__\\\\|\\r\\n*/\\r\\n\\r\\n\\r\\n/**\\r\\n    ERROR CODE\\r\\n    ----------\\r\\n    \\\"1\\\" : \\\"Not a member\\\".\\r\\n    \\\"2\\\" : \\\"No interested participants yet\\\".\\r\\n    \\\"4\\\" : \\\"Probation hit limit.\\r\\n    \\\"6\\\" : \\\"Invalid caller\\\".\\r\\n    \\\"7\\\" : \\\"Invalid entry\\\".\\r\\n    \\\"8\\\" : \\\"Approval to zero address\\\".\\r\\n    \\\"9\\\" : \\\"Already signed\\\".\\r\\n    \\\"11\\\" : \\\"Insufficient value provided\\\".\\r\\n    \\\"13\\\" : \\\"Time elapsed: Cannot initialize again\\\".\\r\\n    \\\"14\\\" : \\\"Offer price less than minimumOffer\\\". \\r\\n    \\\"15\\\" : Only owner | curator.\\r\\n    \\\"16\\\" : Low bal\\r\\n    \\\"17\\\" : OnlyOwner\\r\\n\\r\\n*/\\r\\n\\r\\ncontract HiWork is ReadOnly, Pausable, Curators {\\r\\n  using Lib for *;\\r\\n\\r\\n  error TestError(address pay, uint offer, address caller);\\r\\n\\r\\n  // Contract initializer. Useful in testing and minor upgrade\\r\\n  uint8 private initializer;\\r\\n\\r\\n  //Mapping of hirer to trustee\\r\\n  mapping (address => address) public trustees;\\r\\n\\r\\n  // Caller must be a valid member of HiWork\\r\\n  modifier isValidMember() {\\r\\n    require(_queryJobberStatus(_msgSender()) > 0, \\\"1\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /**@dev Initialized storage vars \\r\\n   * @param _initializer : Used to set initial parameters. \\r\\n   *  The parameters can only be altered the number of times the _initializer was set.\\r\\n  */\\r\\n  constructor (uint8 _initializer, address _feeTo) Storage(_feeTo) { \\r\\n    initializer = _initializer; \\r\\n  }\\r\\n\\r\\n  function initialize (\\r\\n    uint8 _cancellationRate,\\r\\n    uint256 _minimMumOffer, \\r\\n    address _paymentCurrency,\\r\\n    address _jobbersContract\\r\\n  ) public onlyOwner {\\r\\n      require(initializer > 0, \\\"13\\\");\\r\\n      initializer --;\\r\\n    _initialize (\\r\\n      _cancellationRate, \\r\\n      _minimMumOffer, \\r\\n      _paymentCurrency,\\r\\n      _jobbersContract \\r\\n    );\\r\\n  }\\r\\n\\r\\n  //Fallback/Receive func\\r\\n  receive () external payable {\\r\\n    Address.sendValue(payable(feeTo), msg.value);\\r\\n  }\\r\\n\\r\\n  /**@dev Posts new Job\\r\\n          @param jobRef - Can be Job URL or any reference to the current job.\\r\\n          @param proposedEndDateInDays - Expected duration to complete the job.\\r\\n          @param curatorId : On the frontend, curators are mapped to their respective ids,\\r\\n                  Hirers may add curator service or not.\\r\\n          @param offerPrice : The amount in stable coin the hirer is willing to pay for this job.\\r\\n          Note - Hirer must have given approval to withdraw the offerPrice in cUSD, which\\r\\n                  must also be greater than minimum offer.\\r\\n                  Note : Payment currency is in cUSD. \\r\\n  */\\r\\n  function postJob(\\r\\n    uint8 jobType,\\r\\n    string memory title,\\r\\n    string[] memory tags,\\r\\n    string memory jobRef, \\r\\n    uint16 proposedEndDateInDays, \\r\\n    uint offerPrice, \\r\\n    uint curatorId\\r\\n  ) external payable whenNotPaused returns(uint jobId) {\\r\\n    address _trustee = trustees[_msgSender()];\\r\\n    if(_trustee == address(0)) {\\r\\n      _trustee = address(new Trustee(_msgSender(), paymentCurrency));\\r\\n      trustees[_msgSender()] = _trustee;\\r\\n    }\\r\\n    paymentCurrency\\r\\n      .getAllowance(_msgSender(), address(this))\\r\\n        .uint256GE(minimMumOffer, '14', 0)\\r\\n          .uint256GE(offerPrice, '14', 1)\\r\\n            .uint256G(1e18, '14', 0)\\r\\n              .spendAllowance(paymentCurrency, _msgSender(), _trustee);\\r\\n\\r\\n    unchecked {\\r\\n      offerPrice = offerPrice - 1e18;\\r\\n    }\\r\\n    jobId = _postJob(jobType, title, tags, jobRef,  uint64(proposedEndDateInDays * 1 days),  offerPrice,  _msgSender(),  _getCuratorAddr(curatorId));\\r\\n    emit JobCreated(jobId, offerPrice, _trustee, jobRef);\\r\\n    \\r\\n    return jobId;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    @dev Jobbers show interest to work on a particular job\\r\\n        @param jobId - The Job id Jobber is applying for. An id not greater than the job array \\r\\n          length is expected.\\r\\n        @param proposedCompletionDateInDays - Jobbers can propose completion date.\\r\\n          This however should not be confused for that of the hirer. Hirer will eventually\\r\\n          accept or reject the proposal date. \\r\\n        Note: The parameter \\\"proposedCompletionDateInDays\\\" should be in days e.g 7\\r\\n        @param myBestPrice - Best price jobber will accept the job. This enables better negotiation\\r\\n          thereby protecting the interests and rights of both parties.\\r\\n        \\r\\n        Note: Intending Jobber applying for this job must either be on probation or approved member.  \\r\\n   */\\r\\n  function requestToWork(\\r\\n    uint256 jobId, \\r\\n    uint16 proposedCompletionDateInDays, \\r\\n    uint256 myBestPrice\\r\\n  ) external whenNotPaused isValidMember isJobIdValid(jobId) enforceJobStatus(jobId, JobStatus.OPEN) returns(bool) {\\r\\n    JobMetadata memory j = _getJobData(jobId);\\r\\n    address caller = _msgSender();\\r\\n    uint bestRate = myBestPrice == 0 ? j.job.offerPrice : myBestPrice;\\r\\n    uint64 completionDate = proposedCompletionDateInDays == 0 ? j.job.proposeEnd : proposedCompletionDateInDays * 1 days;\\r\\n    \\r\\n    _enforceJobOfferLimit(j.job.offerPrice, caller);\\r\\n    _enforceCompliance(caller);\\r\\n    require(proposedCompletionDateInDays > 0 && proposedCompletionDateInDays < 365 days, \\\"7\\\");\\r\\n    _createAndUpdateNewRequest(\\r\\n      caller, \\r\\n      jobId,\\r\\n      completionDate,\\r\\n      bestRate\\r\\n    );\\r\\n\\r\\n    _postComplianceFor(caller, block.timestamp);\\r\\n\\r\\n    emit WorkRequested(jobId, caller, j.job.offerPrice, myBestPrice, completionDate);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**@dev Hirer accepts request (s) to work on job.\\r\\n        @param jobId - Job index\\r\\n        @param selectedPositions - List of jobbers hirer accepts \\r\\n                            to collaborate on the job.\\r\\n                            It should contain jobbers' \\r\\n                            position Id.\\r\\n        Note - Caller be the creator of job at jobId\\r\\n              - Job must be open.\\r\\n              - There must be requests greater than 0.\\r\\n              It is assumed Hirer has scrutinized properly, the interests shown in job at \\r\\n                jobId, hence, proposed completion time of each collaborator is \\r\\n                evaluated, and that best satisfy the hirer's interest.\\r\\n  */\\r\\n  function approveRequests(\\r\\n    uint jobId, \\r\\n    uint8[] memory selectedPositions\\r\\n  ) \\r\\n    external \\r\\n    whenNotPaused \\r\\n    isJobIdValid(jobId) \\r\\n    enforceJobStatus(jobId, JobStatus.OPEN)\\r\\n    returns(bool)\\r\\n  {\\r\\n    JobMetadata memory j = _getJobData(jobId);\\r\\n    _onlyHirerOrCurator(j.job.hirer, _msgSender(), j.curator, true);\\r\\n    j.requests.length.uint256GE(1, \\\"2\\\", 0);\\r\\n    for(uint8 i = 0; i < selectedPositions.length; i++) {\\r\\n      uint8 sel = uint8(selectedPositions[i]);\\r\\n      j.requests[sel].identifier.addressNE(address(0), \\\"8\\\");\\r\\n      uint64 jobbersProposedJobEnd = j.requests[sel].proposedJobEnd;\\r\\n      _updateRequest(jobId, sel);\\r\\n      if(jobbersProposedJobEnd > j.job.proposeEnd) {\\r\\n        _updateProposeEndDate(jobId, jobbersProposedJobEnd);\\r\\n      }\\r\\n    }\\r\\n    _setStatus(jobId, JobStatus.TAKEN);\\r\\n\\r\\n    emit RequestApproved(jobId, selectedPositions);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n   /**@dev Utility to submit completed jobs.\\r\\n        Note: We enforce strict rules that ensure caller is a \\r\\n                valid collaborator since position of any valid\\r\\n                collaborator will always be greater than zero. \\r\\n          - If there is only one collaborator, we simply set \\r\\n              completion and exit the program.\\r\\n          - If collaborator is more than one, we check that caller's \\r\\n              signature is not appended before now, otherwise the program reverts.\\r\\n\\r\\n        Note If collaborator is more than one, then minimum of 2 signatures\\r\\n              are required to  set job state to `completed`.\\r\\n      @param jobId - Job index/position.\\r\\n   */\\r\\n  function submitAndSignCompletion(uint jobId) \\r\\n    public \\r\\n    isValidMember \\r\\n    isJobIdValid(jobId) \\r\\n    whenNotPaused\\r\\n    enforceJobStatus(jobId, JobStatus.TAKEN) \\r\\n    returns(bool _return)\\r\\n  {\\r\\n    JobMetadata memory j = _getJobData(jobId);\\r\\n    address caller = _msgSender();\\r\\n    uint8 pos = _getPosition(caller, jobId);\\r\\n    j.requests[pos].signed.boolEq(false, \\\"9\\\");\\r\\n    if(j.requests.length == 1) return _setStatus(jobId, JobStatus.COMPLETED);\\r\\n    uint8 sig;\\r\\n    //If there was at least one signature\\r\\n    if((j.job.signature + 1) == 2) {\\r\\n      sig = 2;\\r\\n      _return = _setStatus(jobId, JobStatus.COMPLETED);\\r\\n    }\\r\\n\\r\\n    //If there was no previous signature\\r\\n    if((j.job.signature + 1) < 2) {\\r\\n      sig = 1;\\r\\n      _return = true;\\r\\n    }\\r\\n    _updateSignature(jobId, sig);\\r\\n    _updateSignedFlag(jobId, pos);\\r\\n    emit Submission(jobId, caller);\\r\\n\\r\\n    return _return;\\r\\n  }\\r\\n\\r\\n  /**Hirer confirms and approve that job at jobId was completed and final.\\r\\n        Note - Payment (less fee) is splitted among the jobbers.\\r\\n              o Jobbers are able to withdraw payment from the trustee.\\r\\n              o Rewards are minted to jobbers.\\r\\n               Function is able to handle if there was collaboration or not.\\r\\n        @param jobId - Job index.\\r\\n  \\r\\n  */\\r\\n  function approveCompletion(uint jobId) \\r\\n    external \\r\\n    whenNotPaused\\r\\n    enforceJobStatus(jobId, JobStatus.COMPLETED) \\r\\n    isJobIdValid(jobId) returns(bool) \\r\\n  {\\r\\n    JobMetadata memory j = _getJobData(jobId);\\r\\n    _onlyHirerOrCurator(j.job.hirer, _msgSender(), j.curator, true);\\r\\n    _setStatus(jobId, JobStatus.CLOSED);\\r\\n    (uint256 netPay, uint256 fee) = j.job.offerPrice.getNetPay();\\r\\n    address _trustee = trustees[j.job.hirer];\\r\\n    // uint len = j.requests.length;\\r\\n    // require(_trustee != address(0), 'd');\\r\\n    unchecked {\\r\\n      SafeCall.safeSplit(ITrustee(_trustee), j.requests, netPay, fee + 1e18, 0, feeTo);\\r\\n    }\\r\\n\\r\\n    emit JobCompleted(jobId);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**@dev Internal: Enforces that Probationary members cannot accept jobs with \\r\\n      offer above certain limit e.g $500\\r\\n      @param offerPrice - Actual price Hirer is willing to pay for\\r\\n                            the job offer.\\r\\n      Note :  We enquire from HPM NFT contract if caller owns a \\r\\n                balance. We can be sure that each jobber cannot hold\\r\\n                more than 1 NFT collection at any time.\\r\\n            o NFT membership is not transferable.\\r\\n   */\\r\\n  function _enforceJobOfferLimit(uint256 offerPrice, address jobber) internal view {\\r\\n    uint256 c1 = IJobbers(jobberContract).getAvatarInfo(jobber);\\r\\n    // if(c1 == 1) revert(\\\"Here\\\");\\r\\n    if(c1 == 1) {\\r\\n      if(probationOfferLimit > 0) {\\r\\n        offerPrice.uint256LE(probationOfferLimit, \\\"4\\\");\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  ///@dev Checks if caller is the hirer with jobId\\r\\n  function _onlyHirerOrCurator(address hirer, address caller, address curator, bool doubleCheck) internal virtual {\\r\\n    bool pass;\\r\\n    if(caller == hirer) pass = true;\\r\\n    if(!pass && doubleCheck) {\\r\\n      if(curator != address(0)) {\\r\\n        if(caller == curator) pass = true;\\r\\n      }\\r\\n    }\\r\\n    require(pass, \\\"15\\\");\\r\\n  }\\r\\n\\r\\n  /**@dev Cancels job offer @param jobId - {Job index}\\r\\n      Note \\r\\n        - Caller must be the hirer of Job with valid JobId.\\r\\n        - Caller must not be a contract address.\\r\\n        For more info, see { Storage.sol - _removeJob }\\r\\n  \\r\\n   */\\r\\n  function cancelJob(uint jobId) external whenNotPaused isJobIdValid(jobId) returns(bool) {\\r\\n    (uint refund, uint platformFee, uint splittable, Jobber[] memory requests) = _removeJob(jobId);\\r\\n    address _trustee = trustees[_msgSender()];\\r\\n    SafeCall.safeSplit(ITrustee(_trustee), requests, splittable, platformFee, refund, feeTo);\\r\\n\\r\\n    emit JobCanceled(jobId, refund, splittable);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    @dev Withdraws from this contract if any.\\r\\n        Note - Owner's privilege.\\r\\n        @param to - Address to send funds to.\\r\\n        @param amount - Amount to withdraw.\\r\\n   */\\r\\n  function withdraw(address to, uint amount) public onlyOwner{\\r\\n    if(address(this).balance < amount) revert();\\r\\n    (bool s,) = to.call{value: amount}(\\\"\\\");\\r\\n    if(!s) revert();\\r\\n  }\\r\\n\\r\\n  /** \\r\\n    @dev Halts contract execution \\r\\n      Note: Owner's privilege\\r\\n  */\\r\\n  function pause() public onlyOwner { _pause(); }\\r\\n\\r\\n  /** \\r\\n    @dev Continues contract execution \\r\\n      Note: Owner's privilege\\r\\n  */\\r\\n  function unpause() public onlyOwner { _unpause(); }\\r\\n\\r\\n    /**\\r\\n    @dev Reset cancellation fee.\\r\\n        Note - Owner's privilege.\\r\\n        @param newRate - Cancellation rate.\\r\\n         Rate should not be greater than 100%.\\r\\n   */\\r\\n  function setCancellationRate(uint8 newRate) public onlyOwner {\\r\\n    newRate.uint8L(100, \\\"7\\\");\\r\\n    _setCancellationRate(newRate);\\r\\n  }\\r\\n\\r\\n  function _beforeInvocation() internal view override {\\r\\n    require(_msgSender() == owner(), \\\"17\\\");\\r\\n  }\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\n    \",\"keccak256\":\"0x49c0d41cb795b716f4c50ea141f2ef5e8c3d071d2cd22b814d3ebb44c5863679\",\"license\":\"MIT\"},\"contracts/main/ReadOnly.sol\":{\"content\":\"/** SPDX-License-Identifier: MIT*/\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"./Storage.sol\\\";\\r\\n\\r\\nabstract contract ReadOnly is Storage {\\r\\n\\r\\n  /**@dev Returns list of interested participants for a job \\r\\n          @param jobId - {job index} */\\r\\n  function getRequests(uint jobId) public view isJobIdValid(jobId) returns(Jobber[] memory) \\r\\n  {\\r\\n    return _getJobRequests(jobId);\\r\\n  }\\r\\n\\r\\n  /**@dev Read single job from storage.\\r\\n      @param jobId - Job index\\r\\n  */\\r\\n  function getJobInfo(uint jobId) external view isJobIdValid(jobId) returns(JobMetadata memory) {\\r\\n    return _getJobData(jobId);\\r\\n  }\\r\\n\\r\\n  /**@dev Read all jobs from storage.\\r\\n  */\\r\\n  function viewJobs() public view returns(JobMetadata[] memory all) {\\r\\n    return _getAllJobs();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    @dev See { Storage - _getPosition} \\r\\n      @param jobId - Job index/position.\\r\\n  */\\r\\n  function getPosition(address jobber, uint jobId) public view isJobIdValid(jobId) returns (uint8) \\r\\n  {\\r\\n    return uint8(_getPosition(jobber, jobId));\\r\\n  }\\r\\n\\r\\n}\",\"keccak256\":\"0x38c825492e45bb9c6365a6c339d43a99b6c9acade7b1999e205169b9ad9e99bb\",\"license\":\"MIT\"},\"contracts/main/Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"./Trustee.sol\\\";\\r\\nimport \\\"../utils/Lib.sol\\\";\\r\\nimport \\\"./interfaces/IJob.sol\\\";\\r\\nimport \\\"../../node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport \\\"../../node_modules/@openzeppelin/contracts/interfaces/IERC721.sol\\\";\\r\\nimport \\\"../tokens/erc721/interfaces/IERC721Extended.sol\\\";\\r\\nimport \\\"./jobbers/IJobbers.sol\\\";\\r\\n\\r\\n/** \\r\\n  \\r\\n    ERROR CODE\\r\\n    ----------\\r\\n    \\\"1\\\" : Not a member.\\r\\n    \\\"3\\\" : Ownership not found.\\r\\n    \\\"5\\\" : Transfer failed.\\r\\n    \\\"7\\\" : Invalid entry.\\r\\n    \\\"10\\\" : Probation period is over.\\r\\n    \\\"12\\\" : Max of 5 collaborators for a job.\\r\\n    \\\"16\\\" : Job cannot be canceled at this stage.\\r\\n    \\\"18\\\" : Target level differs.\\r\\n    \\\"19\\\" : Type out of bound\\r\\n*/\\r\\n\\r\\nabstract contract Storage is IJob {\\r\\n  using Lib for *;\\r\\n\\r\\n  ///@dev Minimum threshold for all job offers.\\r\\n  uint256 public minimMumOffer;\\r\\n\\r\\n  address public jobberContract;\\r\\n\\r\\n  //Account to receive fee\\r\\n  address public feeTo;\\r\\n\\r\\n  // Stablecoin address i.e cUSD\\r\\n  address public paymentCurrency;\\r\\n\\r\\n  ///@dev Cancellation rate\\r\\n  uint8 public cancellationRate;\\r\\n\\r\\n  ///@dev Limits the offer probationary members can accept.\\r\\n  uint public probationOfferLimit;\\r\\n\\r\\n  // Array of jobs\\r\\n  JobMetadata[] private jobs;\\r\\n\\r\\n  /**@dev Mapping of addresses in Jobs to position \\r\\n    i.e Jobber's position in the list of collaborators\\r\\n    for each posted jobs.\\r\\n  */ \\r\\n  mapping(address => mapping(uint => uint8)) private positions;\\r\\n\\r\\n  //Mapping of Jobbers to compliance\\r\\n  mapping(address => uint64) private compliance;\\r\\n\\r\\n  /**@dev Guards against error accessing non-exisitng item in the job array.\\r\\n            Job must be in an acceptable status.\\r\\n  */\\r\\n  modifier enforceJobStatus(uint256 jobId, JobStatus _jobStat)\\r\\n  {\\r\\n    uint8 jStatus = uint8(jobs[jobId].job.jStatus);\\r\\n    jStatus.uint8Eq(uint8(_jobStat), \\\"12\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  modifier isJobIdValid(uint jobId) {\\r\\n    uint jobIndex = jobs.length;\\r\\n    jobId.uint256LE(jobIndex, \\\"7\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  constructor(address _feeTo) {\\r\\n    feeTo = _feeTo;\\r\\n  }\\r\\n\\r\\n  function _initialize (\\r\\n    uint8 _cancellationRate, \\r\\n    uint _minimMumOffer, \\r\\n    address _paymentCurrency,\\r\\n    address _jobbersContract\\r\\n  )\\r\\n    internal \\r\\n  {\\r\\n    minimMumOffer = _minimMumOffer;\\r\\n    cancellationRate = _cancellationRate;\\r\\n    paymentCurrency = _paymentCurrency;\\r\\n    jobberContract = _jobbersContract;\\r\\n  }\\r\\n\\r\\n  function _now() internal view returns(uint64 _return) {\\r\\n    _return = uint64(block.timestamp);\\r\\n  }\\r\\n\\r\\n  /**@dev Cancels job @param jobId - {job index}\\r\\n    Note : Hirer is at liberty to cancel job anytime if:\\r\\n        - Deadline has elapsed, or\\r\\n        - Job in states other than completed.\\r\\n      o Cannot cancel completed jobs.\\r\\n    They're surcharged if wish to cancel when it is opened or taken and interest already shown.\\r\\n    Cancellation fee (less platform fee) is splitted among collaborators.\\r\\n  \\r\\n   */\\r\\n  function _removeJob(uint jobId) internal virtual isJobIdValid(jobId) returns (uint refund, uint platformFee, uint splittable, Jobber[] memory requests) {\\r\\n    JobMetadata memory j = _getJobData(jobId);\\r\\n    requests = j.requests;\\r\\n    refund = j.job.offerPrice;\\r\\n    msg.sender.addressEq(j.job.hirer, \\\"3\\\");\\r\\n    require(uint8(j.job.jStatus) < uint8(JobStatus.COMPLETED), \\\"16\\\");\\r\\n\\r\\n    if(j.job.jStatus == JobStatus.TAKEN || _now() > (j.job.datePosted + 24 hours)) {\\r\\n      uint8 rate = _getCancellationRate();\\r\\n      if(rate > 0) {\\r\\n        uint cancellationFee = (refund * rate) / 100;\\r\\n        unchecked {\\r\\n          refund = refund - cancellationFee;\\r\\n          platformFee = (cancellationFee * 15) / 100;\\r\\n          splittable = cancellationFee - platformFee;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    \\r\\n    delete jobs[jobId];\\r\\n  }\\r\\n\\r\\n  //Returns cancellation rate: #Gas saving\\r\\n  function _getCancellationRate() internal view returns (uint8 cRate) {\\r\\n    cRate = cancellationRate;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    @dev Returns job at jobId in storage \\r\\n      @param jobId - Job index/position.\\r\\n  */\\r\\n  function _getJobData(uint jobId) internal view virtual returns (JobMetadata memory _jobD ){ \\r\\n    _jobD = jobs[jobId]; \\r\\n  }\\r\\n\\r\\n  /**\\r\\n    @dev Populates job in job array in storage \\r\\n      @param jobRef - Job link or can be any string or byte;\\r\\n      @param proposeEnd - Expected time to complete job;\\r\\n      @param offerPrice - Price offer for this job;\\r\\n        Note - We explicitly initialize 5 empty interest slots for \\r\\n                each job created.\\r\\n    \\r\\n      @notice \\r\\n      \\r\\n      Noticable error:\\r\\n            Using the current compiler version in the truffle config file, I get \\r\\n              compiler error while trying to instantiate a new request, which is \\r\\n              more like copying from memory to the storage, and solidity seems not \\r\\n              support such operation at this time.\\r\\n\\r\\n              jobs.push(jobber({\\r\\n                jobRef: jobRef,\\r\\n                datePosted: uint32(block.timestamp),\\r\\n                proposeEnd: uint32(proposeEnd),\\r\\n                offerPrice: offerPrice,\\r\\n                hirer: msg.sender,\\r\\n                jStatus: JobStatus.OPEN,\\r\\n                ...\\r\\n                requests: new jobber[](5)  <=== This part causes a panic, and the program exit, producing the following Compile error.\\r\\n              }))\\r\\n\\r\\n              CompileError: UnimplementedFeatureError: Copying of type struct Iprobationer.jobber memory[] memory to storage not yet supported.\\r\\n\\r\\n              This could have been the easiest way of creating an empty request array. Notwithstanding, to most problem, there is \\r\\n              at least a way out.\\r\\n  */\\r\\n  function _postJob( \\r\\n    uint8 jobType,\\r\\n    string memory title,\\r\\n    string[] memory tags,\\r\\n    string memory jobRef, \\r\\n    uint256 proposeEnd, \\r\\n    uint256 offerPrice,\\r\\n    address hirer,\\r\\n    address curator\\r\\n  ) internal virtual returns(uint jobId) {\\r\\n    require(jobType < 3, \\\"19\\\");\\r\\n    jobId = jobs.length;\\r\\n    jobs.push();\\r\\n    jobs[jobId].job = Metadata(\\r\\n                                JobType(jobType),\\r\\n                                title.encode(),\\r\\n                                jobRef.encode(), \\r\\n                                0, \\r\\n                                _now(), \\r\\n                                uint64(proposeEnd), \\r\\n                                offerPrice, \\r\\n                                hirer, \\r\\n                                JobStatus.OPEN\\r\\n                              );\\r\\n    jobs[jobId].curator = curator;\\r\\n    for(uint8 i = 0; i < tags.length; i++) {\\r\\n      jobs[jobId].tags.push(tags[i].encode());\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    @dev Returns position for jobber on job at jobId in storage \\r\\n      @param jobber - Subject.\\r\\n      @param jobId - Job index/position.\\r\\n  */\\r\\n  function _getPosition(address jobber, uint jobId) internal view virtual returns (uint8) \\r\\n  { return positions[jobber][jobId]; }\\r\\n\\r\\n  /**\\r\\n     @dev Returns updates position for jobber \\r\\n      @param jobber - Subject.\\r\\n      @param jobId - Job index/position.\\r\\n  */\\r\\n  function _assignAndUpdateIndex(address jobber, uint jobId) internal virtual returns (uint8)\\r\\n  {\\r\\n    uint8 newPos = _createNewIndex(jobId);\\r\\n    positions[jobber][jobId] = newPos;\\r\\n    return newPos;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    @dev Returns interests for job at jobId in storage \\r\\n      @param jobId - Job index/position.\\r\\n  */\\r\\n  function _getJobRequests(uint jobId) internal virtual view returns (Jobber[] memory req) \\r\\n  {\\r\\n    req = jobs[jobId].requests;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n     @dev Returns updates position for jobber \\r\\n      @param jobber - Subject.\\r\\n      @param jobId - Job index/position.\\r\\n      @param proposedCompletionDateInDays - Jobber's proposed completion \\r\\n            time (in days),\\r\\n      @param proposedOffer - Jobber's preferred price.\\r\\n  */\\r\\n  function _createAndUpdateNewRequest(\\r\\n    address jobber, \\r\\n    uint jobId,\\r\\n    uint64 proposedCompletionDateInDays,\\r\\n    uint proposedOffer\\r\\n  ) internal virtual \\r\\n  {\\r\\n    _assignAndUpdateIndex(jobber, jobId);\\r\\n    jobs[jobId].requests.push(\\r\\n      Jobber(\\r\\n        proposedCompletionDateInDays,\\r\\n        proposedOffer,\\r\\n        jobber,\\r\\n        false,\\r\\n        false\\r\\n      )\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    @dev Returns all jobs in storage \\r\\n  */\\r\\n  function _getAllJobs() internal virtual view returns (JobMetadata[] memory _jobs) \\r\\n  {\\r\\n    _jobs = jobs;\\r\\n    return _jobs;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    @dev Returns job at jobId from storage \\r\\n      @param jobber - Subject\\r\\n  */\\r\\n  function _getCompliance(address jobber) internal virtual view returns (uint64) \\r\\n  {\\r\\n    return compliance[jobber];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    @dev Returns job at jobId from storage \\r\\n      @param jobber - Subject\\r\\n      @param value - Value to update for subject\\r\\n  */\\r\\n  function _postComplianceFor(address jobber, uint value) internal virtual \\r\\n  {\\r\\n    compliance[jobber] = uint32(value);\\r\\n  }\\r\\n\\r\\n  /**@dev Generates new interest position for @param jobId - {Job index} */\\r\\n  function _createNewIndex(uint jobId) private view returns (uint8) \\r\\n  {\\r\\n    return uint8(jobs[jobId].requests.length);\\r\\n  }\\r\\n\\r\\n  function _queryJobberStatus(address target) internal virtual view returns(uint8 _return) {\\r\\n    _return = IJobbers(jobberContract).queryStatus(target);\\r\\n  }\\r\\n\\r\\n  /**@dev Enforces compliance. Jobbers with HiWork Probationary Membership\\r\\n        are expected to upgrade within 60 days by undergoing compentency \\r\\n        test to upgrade by interacting with the probationer contract. \\r\\n\\r\\n      @notice - If jobber already passed test, they're encouraged to explicitly upgrade\\r\\n        by calling designated function.\\r\\n  */\\r\\n  function _enforceCompliance(address caller) \\r\\n    internal\\r\\n    virtual \\r\\n  {\\r\\n    uint8 _status = _queryJobberStatus(caller);\\r\\n    if(_status == 1) //i.e \\\"Member on probation. \\r\\n    {\\r\\n      uint64 startProbation = _getCompliance(caller);\\r\\n      if(startProbation == 0) compliance[caller] = uint64(block.timestamp);\\r\\n      else require(block.timestamp < startProbation + (60 * 1 days), \\\"10\\\");\\r\\n    }\\r\\n\\r\\n    if(_status == 0) revert (\\\"1\\\");\\r\\n  }\\r\\n\\r\\n  /**@dev Internal: Updates Job completion status. */\\r\\n  function _setStatus(uint jobId, JobStatus status) internal virtual returns (bool) \\r\\n  {\\r\\n    jobs[jobId].job.jStatus = status;\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**@dev Updates signature for job \\r\\n        @param jobId {Job index} with \\r\\n        @param value - {New signature}\\r\\n  */\\r\\n  function _updateSignature(uint jobId, uint8 value) internal virtual \\r\\n  {\\r\\n    jobs[jobId].job.signature = value;\\r\\n  }\\r\\n\\r\\n  /**@dev Updates signature for specific job \\r\\n        @param jobId {Job index} with \\r\\n        @param pos - Jobber's position\\r\\n  */\\r\\n  function _updateSignedFlag(uint jobId, uint8 pos) internal virtual \\r\\n  {\\r\\n    jobs[jobId].requests[pos].signed = true;\\r\\n  }\\r\\n\\r\\n  /**@dev Updates request for Jobber at pos \\r\\n      @param jobId - job Index\\r\\n      @param pos - Position of jobber for whom to update request\\r\\n  */\\r\\n  function _updateRequest(uint jobId, uint8 pos) internal virtual \\r\\n  {\\r\\n    jobs[jobId].requests[pos].acceptance = true;\\r\\n  }\\r\\n\\r\\n  ///@dev Sets cancellatioon rate\\r\\n  function _setCancellationRate(uint8 newFeeRate) internal virtual \\r\\n  {\\r\\n    _beforeInvocation();\\r\\n    cancellationRate = newFeeRate;\\r\\n  }\\r\\n\\r\\n  function _updateProposeEndDate(uint jobId, uint64 newDate) internal {\\r\\n    jobs[jobId].job.proposeEnd = newDate; \\r\\n  }\\r\\n\\r\\n  function setOfferLimit(uint _newLimit) public {\\r\\n    _beforeInvocation();\\r\\n    minimMumOffer = _newLimit;\\r\\n  }\\r\\n\\r\\n  function setProbationOfferLimit(uint _newLimit) public {\\r\\n    _beforeInvocation();\\r\\n    probationOfferLimit = _newLimit;\\r\\n  }\\r\\n  \\r\\n  function _beforeInvocation() internal virtual {}\\r\\n  function getLastJobId() public view returns(uint) {\\r\\n    return jobs.length;\\r\\n  }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0xaab87fe2b156e0420300d874f23aeb663b89ce362e545a1fda6df7735bb56624\",\"license\":\"MIT\"},\"contracts/main/Trustee.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"./interfaces/ITrustee.sol\\\";\\r\\nimport \\\"../../node_modules/@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"../../node_modules/@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\r\\nimport \\\"../../node_modules/@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\n/**\\r\\n  @title Trustee: Manages payment for parties to job i.e hirer and jobber.\\r\\n  @author Bobeu : https://github.com/bobeu \\r\\n\\r\\n  ERROR CODE\\r\\n  ----------\\r\\n  \\\"18\\\" : Withdrawal failed\\r\\n  \\\"19\\\" : Bal < netPay\\r\\n  \\\"20\\\" : NothingToWithdraw\\r\\n */\\r\\ncontract Trustee is ITrustee, Ownable, ReentrancyGuard {\\r\\n  // Amount withdrawable by hirer from this contract at any time.\\r\\n  uint256 public withdrawable;\\r\\n\\r\\n  // Amount engaged at any time\\r\\n  uint256 public engaged;\\r\\n\\r\\n  //Job owner\\r\\n  address public hirer;\\r\\n\\r\\n  // cUSD address\\r\\n  address public cUSD;\\r\\n\\r\\n  //Payment ledger\\r\\n  mapping(address => uint256) public payment;\\r\\n\\r\\n  constructor (address hirer_, address _cUSD) {\\r\\n    hirer = hirer_;\\r\\n    cUSD = _cUSD;\\r\\n  }\\r\\n\\r\\n  receive() external payable {}\\r\\n\\r\\n  /**\\r\\n    @dev Splits payment for jobbers on this hirer's request.\\r\\n    Note hirer is able to withdraw available balances in this contract, but \\r\\n        we ensure withdrawables does not affect the position of currently \\r\\n        engaged jobbers.\\r\\n  */\\r\\n  \\r\\n  function splitPayment(\\r\\n    IJob.Jobber[] memory tos, \\r\\n    uint netPay,\\r\\n    uint fee,\\r\\n    uint refundable,\\r\\n    address feeTo\\r\\n  ) external onlyOwner returns(bool) {\\r\\n    // require(feeTo != address(0), \\\"W\\\");\\r\\n    uint _balances = _getBalances();\\r\\n    uint size = tos.length;\\r\\n    uint eachPay = netPay / size;\\r\\n\\r\\n    if(_balances < (netPay + fee)) revert('Trustee: Balances too low');\\r\\n    if(fee > 0) { _withdraw(feeTo, fee); }\\r\\n    if(netPay > 0) {\\r\\n      for(uint i = 0; i < size; i++ ){\\r\\n        address to = tos[i].identifier;\\r\\n        payment[to] += eachPay;\\r\\n      }\\r\\n    }\\r\\n    if(refundable > 0) {\\r\\n      payment[_hirer()] += refundable;\\r\\n    }\\r\\n\\r\\n    return true;\\r\\n  }\\r\\n  \\r\\n  function _getCUSDAddr() private view returns(address _token) {\\r\\n    _token = cUSD;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    @dev Withdraw payment.\\r\\n        Only preselected address are allowed.\\r\\n   */\\r\\n  function withdraw() external payable nonReentrant returns(bool) { \\r\\n    address to = _msgSender();\\r\\n    uint pay = payment[to];\\r\\n    require(pay > 0, \\\"Trustee: Nothing to withdraw\\\");\\r\\n    payment[to] = 0;\\r\\n    _withdraw(to, pay); \\r\\n    return true; \\r\\n  }\\r\\n\\r\\n  function _withdraw(address to, uint amount) private {\\r\\n    require(IERC20(_getCUSDAddr()).transfer(to, amount), 'Trustee: Withdrawal failed');\\r\\n  \\r\\n  }\\r\\n\\r\\n  function _getBalances() internal view returns(uint _balances) {\\r\\n    address token = _getCUSDAddr();\\r\\n    _balances = IERC20(token).balanceOf(address(this));\\r\\n  } \\r\\n\\r\\n  function _hirer() internal view returns(address) { return hirer ; }\\r\\n}\",\"keccak256\":\"0x4306ae636b719d99cbb094b0669d390c852b3271b8cc9bca2ec5f9c10543a6f3\",\"license\":\"MIT\"},\"contracts/main/curators/Curators.sol\":{\"content\":\"/** SPDX-License-Identifier: MIT\\r\\n*/\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"../../../node_modules/@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n/** @title Curator\\r\\n\\r\\n    ERROR CODE\\r\\n    ---------\\r\\n    \\\"21\\\" : Out of bound error\\r\\n    \\\"22\\\" : Registered\\r\\n    \\\"23\\\" : Not a curator\\r\\n\\r\\n */\\r\\nabstract contract Curators is Ownable {\\r\\n  enum Status { NONE, REGISTERED, WHITELISTED }\\r\\n  struct Curator {\\r\\n    Status status;\\r\\n    uint id;\\r\\n    address addr;\\r\\n  }\\r\\n\\r\\n  // Curators\\r\\n  Curator[] public curators;\\r\\n\\r\\n  // Curators curatorsId\\r\\n  mapping(address => uint) public curatorsId;\\r\\n\\r\\n  // Mapping of curators to jobId\\r\\n  mapping(address => mapping(uint => bool)) private isCurator;\\r\\n\\r\\n  // Validate permissions\\r\\n  modifier checkEligibility(uint8 selector, string memory errorMessage) {\\r\\n    if(selector > 2) revert('21');\\r\\n    require(_curatorStatus(_msgSender()) == Status(selector), errorMessage);\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /**@dev We initialize the curators array with an empty element. This helps \\r\\n      us properly track valid curators easily. Approved Curators cannot have \\r\\n      zero id.\\r\\n   */\\r\\n  constructor() {\\r\\n    curators.push();\\r\\n  }\\r\\n\\r\\n  // Return the current status of a curator\\r\\n  function _curatorStatus(address target) internal view returns(Status status) {\\r\\n    uint id = curatorsId[target];\\r\\n    status = curators[id].status;\\r\\n  }\\r\\n\\r\\n  // Registers a new curator. Such address must not have been registered\\r\\n  function becomeACurator() public checkEligibility(0, \\\"22\\\") {\\r\\n    address caller = _msgSender();\\r\\n    uint id = curators.length;\\r\\n    curatorsId[caller] = id; \\r\\n    curators.push(Curator(Status.REGISTERED, id, caller));\\r\\n  }\\r\\n\\r\\n  // Curators are free to remove themselves\\r\\n  function deleteMe() public {\\r\\n    address caller = _msgSender();\\r\\n    uint id = curatorsId[caller];\\r\\n    require(id > 0, '23');\\r\\n    delete curators[id];\\r\\n    curatorsId[caller] = 0;\\r\\n  }\\r\\n\\r\\n  /**@dev Only Owner can whitelist curators.\\r\\n    Such address must have been registered before the invocation can be \\r\\n    successful.\\r\\n  */ \\r\\n  function whitelistCurators(address[] memory targets) public onlyOwner {\\r\\n    for(uint i = 0; i < targets.length; i++) {\\r\\n      address target = targets[i];\\r\\n      uint id = curatorsId[target];\\r\\n      if(_curatorStatus(target) == Status.REGISTERED) {\\r\\n        curators[id].status = Status.WHITELISTED;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  // Return curators status to none\\r\\n  function blacklistCurators(address[] memory targets) public onlyOwner {\\r\\n    for(uint i = 0; i < targets.length; i++) {\\r\\n      curators[curatorsId[targets[i]]].status = Status.NONE;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  // Return curator's address.\\r\\n  function _getCuratorAddr(uint curatorId) internal view returns(address _curator) {\\r\\n    require(curatorId < curators.length, \\\"21\\\");\\r\\n    _curator = curators[curatorId].addr;\\r\\n  }\\r\\n\\r\\n}\",\"keccak256\":\"0x1ae6516e54f4e155e394dd32235f965115c48a3cf253ba7ae2a0faa785942d23\",\"license\":\"MIT\"},\"contracts/main/interfaces/ICommon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\ninterface ICommon {\\r\\n    /**@dev Categories of jobber.  */\\r\\n  enum Tier { NONE, PROBATION, APPROVED }\\r\\n\\r\\n  struct Membership {\\r\\n    Tier status;\\r\\n    uint avatarId;\\r\\n    JobberData other;\\r\\n  }\\r\\n\\r\\n  // membership\\r\\n  struct MembershipBase {\\r\\n    uint probFee;\\r\\n    address upgrader;\\r\\n  }\\r\\n\\r\\n  struct JobberData {\\r\\n    bytes name;\\r\\n    bytes aka;\\r\\n    bytes field;\\r\\n    bytes profileURI;\\r\\n    bytes avatar;\\r\\n    uint8 ratings;\\r\\n    uint8 level;\\r\\n  }\\r\\n  \\r\\n}\",\"keccak256\":\"0x503ad0d5ee5a9856801880b96675f84f233cb624cc3ed0dd4605925f2cc6a10d\",\"license\":\"MIT\"},\"contracts/main/interfaces/IJob.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"./ICommon.sol\\\";\\r\\n\\r\\ninterface IJob {\\r\\n  error InvalidSelector(uint8);\\r\\n\\r\\n  event CompletedJob(uint jobId, uint newSpotId, address indexed _trustee, address indexed hirer);\\r\\n  event JobCanceled(uint jobId, uint amountRefundToHirer, uint amountPaidToJobbers);\\r\\n  event JobCreated(uint jobId, uint offer, address trustee, string detail);\\r\\n  event WorkRequested(\\r\\n    uint jobId, \\r\\n    address indexed jobber, \\r\\n    uint actualOffer, \\r\\n    uint negotiatedPrice, \\r\\n    uint proposedCompletionDateInDays\\r\\n  );\\r\\n  event RequestApproved(uint jobId, uint8[] jobbers);\\r\\n  event Submission(uint jobId, address indexed jobber);\\r\\n  event JobCompleted(uint jobId);\\r\\n\\r\\n  /**@dev Steps of jobs. Each job inherits the {JobStatus.CLOSED} status by default which is \\r\\n    synchronous, and can only be in one step at any given time.  \\r\\n   */\\r\\n  enum JobStatus { NULL, OPEN, TAKEN, COMPLETED, CLOSED }\\r\\n\\r\\n  // Job type\\r\\n  enum JobType { ONEOFF, PARTTIME, FULLTIME }\\r\\n\\r\\n  /**\\r\\n    @dev Camp all kinds of fees applicable.\\r\\n      o PROBATION: By jobbers on sign up.\\r\\n      o APPROVED: By jobbers while upgrading.\\r\\n      o CANCELLATION: Paid by Hirer for cancelling jobs that are already engaged.\\r\\n      o PLATFORMONCANCEL: In favor of the platform, computed on gross value of CANCELLATION.\\r\\n      o WITHDRAWAL: BY Jobbers as % of earning.\\r\\n  */\\r\\n  enum Fees { PROBATION, APPROVED, CANCELLATION, PLATFORMONCANCEL, WITHDRAWAL}\\r\\n\\r\\n  /**\\r\\n    @dev Post a new job. \\r\\n    @param jobRef - Link or any reference of type string to the job.\\r\\n    @param proposedEndDateInDays - Proposed/preferred assigned time to execute the job.\\r\\n    Note - Should be in days.\\r\\n  */\\r\\n\\r\\n  function postJob(\\r\\n    uint8 jobType,\\r\\n    string memory title,\\r\\n    string[] memory tags,\\r\\n    string memory jobRef, \\r\\n    uint16 proposedEndDateInDays, \\r\\n    uint offerPrice, \\r\\n    uint curatorId\\r\\n  ) external payable returns(uint jobId);\\r\\n  function requestToWork(uint256 jobId, uint16 proposedCompletionDateInDays, uint256 myBestPrice) external returns(bool);\\r\\n  function approveRequests(uint jobId, uint8[] memory selectedPositions) external returns(bool);\\r\\n  function submitAndSignCompletion(uint jobId) external returns(bool);\\r\\n  function approveCompletion(uint jobId) external returns(bool);\\r\\n  function cancelJob(uint jobId) external returns(bool);\\r\\n  // function becomeAJobber() external payable returns(bool);\\r\\n  function getJobInfo(uint jobId) external view returns(JobMetadata memory);\\r\\n\\r\\n  //Job's subdata type\\r\\n  struct Metadata {\\r\\n    JobType jobType;\\r\\n    bytes title;\\r\\n    bytes jobRef;\\r\\n    uint8 signature;\\r\\n    uint64 datePosted;\\r\\n    uint64 proposeEnd;\\r\\n    uint256 offerPrice;\\r\\n    address hirer;\\r\\n    JobStatus jStatus;\\r\\n  \\r\\n  }\\r\\n\\r\\n  //Job data type\\r\\n  struct JobMetadata {\\r\\n    Metadata job;\\r\\n    Jobber[] requests;\\r\\n    bytes[] tags;\\r\\n    address curator;\\r\\n  }\\r\\n\\r\\n  //Jobber's data type\\r\\n  struct Jobber {\\r\\n    uint64 proposedJobEnd;\\r\\n    uint256 myBestPrice;\\r\\n    address identifier;\\r\\n    bool signed;\\r\\n    bool acceptance;\\r\\n  }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x28bc042e5898fdb0281b3ad43293b92ab987395689ea20e692daf9a7db20f995\",\"license\":\"MIT\"},\"contracts/main/interfaces/ITrustee.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"./IJob.sol\\\";\\r\\n\\r\\ninterface ITrustee {\\r\\n  error NothingToWithdraw();\\r\\n\\r\\n  function splitPayment(\\r\\n    IJob.Jobber[] memory tos, \\r\\n    uint netPay,\\r\\n    uint fee,\\r\\n    uint refundable,\\r\\n    address feeTo\\r\\n  ) external returns(bool);\\r\\n\\r\\n  function withdraw() external payable returns(bool);\\r\\n}\",\"keccak256\":\"0x090e9b8e30274f3425f84e159ff2d8f4a443c6266eb1a6ba1b7410ab41945fbf\",\"license\":\"MIT\"},\"contracts/main/jobbers/IJobbers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT \\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"../interfaces/ICommon.sol\\\";\\r\\n\\r\\ninterface IJobbers {\\r\\n  event MembershipUpgraded(address indexed who);\\r\\n  event MembershipDowngraded(address indexed who);\\r\\n\\r\\n  function becomeAJobber(\\r\\n    string memory name,\\r\\n    string memory aka,\\r\\n    string memory field,\\r\\n    string memory profileURI,\\r\\n    string memory avatar\\r\\n  ) external payable returns(bool);\\r\\n  function queryStatus(address target) external view returns(uint8);\\r\\n  function getAvatarInfo(address jobber) external view returns(uint);\\r\\n  function updateProfileInfo(string memory field, string memory profileURI, string memory avatar) external returns(bool);\\r\\n}\",\"keccak256\":\"0x75c3e16b878434d4701b8b20419b8d0a6286422fb48c81529a17391b54bebfff\",\"license\":\"MIT\"},\"contracts/tokens/erc20/interfaces/IERC20Extended.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\ninterface IERC20Extended {\\r\\n\\r\\n    /**\\r\\n     * @dev Mints `amount` tokens from `from` to `to` \\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Mint} event.\\r\\n     */\\r\\n    function mint(\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x4975ec3a9e2732199d9a97b170e069262007adda7fc88394fd71a11e4a517265\",\"license\":\"MIT\"},\"contracts/tokens/erc721/interfaces/IERC721Extended.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity  0.8.19;\\r\\n\\r\\nimport \\\"../../../../node_modules/@openzeppelin/contracts/interfaces/IERC721.sol\\\";\\r\\nimport \\\"../../../../node_modules/@openzeppelin/contracts/interfaces/IERC721Receiver.sol\\\";\\r\\nimport \\\"../../../../node_modules/@openzeppelin/contracts/interfaces/IERC721Metadata.sol\\\";\\r\\n\\r\\ninterface IERC721Extended is IERC721, IERC721Receiver, IERC721Metadata {\\r\\n  function pause() external;\\r\\n  function unpause() external;\\r\\n  function burn(uint256 tokenId) external returns(bool);\\r\\n  function mint(address to, uint256 tokenId) external returns(bool);\\r\\n}\",\"keccak256\":\"0x736cf715fef08cb043002b8ac71e23e00897fef7bf4c0ee6c800bbeec39161ad\",\"license\":\"MIT\"},\"contracts/utils/Lib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"../main/interfaces/ITrustee.sol\\\";\\r\\nimport \\\"../../node_modules/@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\r\\n\\r\\nlibrary Lib {\\r\\n  /**@dev Performs a double check with returned error messsage */\\r\\n  // function nestedCheck(\\r\\n  //   address actual, \\r\\n  //   address expected, \\r\\n  //   uint256 actual_1, \\r\\n  //   uint256 expected_1, \\r\\n  //   string memory errorMessage) \\r\\n  //     internal pure \\r\\n  // {\\r\\n  //   _compare(actual == expected, errorMessage);\\r\\n  //   _compare(actual_1 >= expected_1, errorMessage);\\r\\n  // }\\r\\n\\r\\n  /**@dev PPerform boolean equality operation */\\r\\n  function boolEq(bool actual, bool expected, string memory errorMessage) internal pure \\r\\n  {\\r\\n    _compare(actual == expected, errorMessage);\\r\\n  }\\r\\n\\r\\n  /**@dev Perform equality operation on uint256 typed data*/\\r\\n  function uint8Eq(uint8 actual, uint8 expected, string memory errorMessage) internal pure\\r\\n  {\\r\\n    _compare(actual == expected, errorMessage);\\r\\n  }\\r\\n\\r\\n  /**@dev Perform greater than or equals-to operation on uint8 typed data*/\\r\\n  function uint8Ge(uint8 actual, uint8 expected, string memory errorMessage) internal pure\\r\\n  {\\r\\n    _compare(actual >= expected, errorMessage);\\r\\n  }\\r\\n\\r\\n  /**@dev Perform greater-than operation on uint8 typed data*/\\r\\n  // function uint8G(uint8 actual, uint8 expected, string memory errorMessage) internal pure\\r\\n  // {\\r\\n  //   _compare(actual > expected, errorMessage);\\r\\n  // }\\r\\n\\r\\n  /**@dev Perform less-than operation on uint8 typed data*/\\r\\n  function uint8L(uint8 actual, uint8 expected, string memory errorMessage) internal pure \\r\\n  {\\r\\n    _compare(actual < expected, errorMessage);\\r\\n  }\\r\\n\\r\\n  /**@dev Perform equality operation on address typed data*/\\r\\n  function addressEq(address actual, address expected, string memory errorMessage) internal pure \\r\\n  {\\r\\n    _compare(actual == expected, errorMessage);\\r\\n  }\\r\\n\\r\\n  /**@dev Perform not-equals-to operation on address typed data*/\\r\\n  function addressNE(address actual, address expected, string memory errorMessage) internal pure \\r\\n  {\\r\\n    _compare(actual != expected, errorMessage);\\r\\n  }\\r\\n\\r\\n  /**@dev Perform equality operation on uint256 typed data*/\\r\\n  function uint256Eq(uint256 actual, uint256 expected, string memory errorMessage) internal pure \\r\\n  {\\r\\n    _compare(actual == expected, errorMessage);\\r\\n  }\\r\\n\\r\\n  /**@dev Perform greater than or equals-to operation on uint256 typed data*/\\r\\n  function uint256GE(uint256 actual, uint256 expected, string memory errorMessage, uint8 toReturn) internal pure returns(uint256 _return)\\r\\n  {\\r\\n    _compare(actual >= expected, errorMessage);\\r\\n    _return = toReturn == 0? actual : expected;\\r\\n  }\\r\\n\\r\\n  /**@dev Perform greater than operation on uint256 typed data*/\\r\\n  function uint256G(uint256 actual, uint256 expected, string memory errorMessage, uint8 toReturn) internal pure returns(uint256 _return) {\\r\\n    _compare(actual > expected, errorMessage);\\r\\n    _return = toReturn == 0? actual : expected;\\r\\n  }\\r\\n\\r\\n  /**@dev Performs a single check with returned error messsage*/\\r\\n  function uint256L(uint256 actual, uint256 expected, string memory errorMessage) internal pure \\r\\n  {\\r\\n    _compare(actual < expected, errorMessage);\\r\\n  }\\r\\n\\r\\n  /**@dev Perform less than or equals-to operation on uint256 typed data*/\\r\\n  function uint256LE(uint256 actual, uint256 expected, string memory errorMessage) internal pure \\r\\n  {\\r\\n    _compare(actual <= expected, errorMessage);\\r\\n  }\\r\\n\\r\\n  /**@dev Performs a single check with returned error messsage*/\\r\\n  function _compare(bool value, string memory errorMessage) internal pure \\r\\n  {\\r\\n    require(value, errorMessage);\\r\\n  }\\r\\n\\r\\n  /**@dev Performs a single check with returned error messsage*/\\r\\n  function getNetPay(uint256 grossPay) internal pure returns(uint256 _netPay, uint256 fee) {\\r\\n    require(grossPay >= 1 ether, \\\"Invalid gross amount\\\" );\\r\\n    fee = (grossPay * 5) / 100;\\r\\n    _netPay = grossPay - fee;\\r\\n  }\\r\\n\\r\\n  function getAllowance(address token, address owner, address beneficiary) internal view returns(uint allowance) {\\r\\n    allowance = IERC20(token).allowance(owner, beneficiary);\\r\\n  }\\r\\n\\r\\n  function spendAllowance(uint allowance, address token, address owner, address receiver) internal returns(uint _return) {\\r\\n    if(allowance > 0) {\\r\\n      require(IERC20(token).transferFrom(owner, receiver, allowance));\\r\\n    }\\r\\n    _return = allowance;\\r\\n  }\\r\\n\\r\\n  function encode(string memory arg) internal pure returns(bytes memory _return) {\\r\\n    _return = abi.encode(arg);\\r\\n  }\\r\\n\\r\\n}\",\"keccak256\":\"0xd3f0f737568d26dae3b1bea8e619671ae474c69ea49fca34b7ce724043bddb24\",\"license\":\"MIT\"},\"contracts/utils/SafeCall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"../main/interfaces/IJob.sol\\\";\\r\\nimport \\\"../main/interfaces/ITrustee.sol\\\";\\r\\nimport \\\"../../node_modules/@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"../tokens/erc20/interfaces/IERC20Extended.sol\\\";\\r\\nimport \\\"../../node_modules/@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\r\\nimport \\\"../../node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeCall\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeCall for IERC20 or ITrustee;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeCall {\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    function safeSplit(\\r\\n        ITrustee trustee,\\r\\n        IJob.Jobber[] memory tos, \\r\\n        uint netPay,\\r\\n        uint fee,\\r\\n        uint refund,\\r\\n        address feeTo\\r\\n    ) internal {\\r\\n        _callTrusteeOptionalReturn(\\r\\n            trustee, \\r\\n            abi.encodeWithSelector(\\r\\n                    trustee.splitPayment.selector, \\r\\n                    tos,\\r\\n                    netPay,\\r\\n                    fee,\\r\\n                    refund,\\r\\n                    feeTo\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function safeMint(\\r\\n        IERC20Extended token,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturnExt(token, abi.encodeWithSelector(token.mint.selector, to, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeCall: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        unchecked {\\r\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n            require(oldAllowance >= value, \\\"SafeCall: decreased allowance below zero\\\");\\r\\n            uint256 newAllowance = oldAllowance - value;\\r\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function safePermit(\\r\\n        IERC20Permit token,\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) internal {\\r\\n        uint256 nonceBefore = token.nonces(owner);\\r\\n        token.permit(owner, spender, value, deadline, v, r, s);\\r\\n        uint256 nonceAfter = token.nonces(owner);\\r\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeCall: permit did not succeed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeCall: low-level call failed\\\");\\r\\n        if (returndata.length > 0) {\\r\\n            // Return data is optional\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeCall: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturnExt(IERC20Extended token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeCall: low-level call failed\\\");\\r\\n        if (returndata.length > 0) {\\r\\n            // Return data is optional\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeCall: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param trustee The trustee targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callTrusteeOptionalReturn(ITrustee trustee, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(trustee).functionCall(data, \\\"SafeCall: low-level call failed\\\");\\r\\n        if (returndata.length > 0) {\\r\\n            // Return data is optional\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeCall: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xecb859d3b27d5171da5baa62543772d9f3415cd16755bc46dc4e33f849e3ba3b\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xaf297d12d8d4a57fe01a70f0ef38908f208e3faedc577056d0b728fa2f3ccf0c\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/interfaces/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/extensions/IERC721Metadata.sol\\\";\\n\",\"keccak256\":\"0x1e88abdf82fcbbf98f97be17ea56c924376350637896bc37366ec9f89b7c2628\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/interfaces/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721Receiver.sol\\\";\\n\",\"keccak256\":\"0x7bd5dc796c245d4c52836610455d172cdfcc1f8dcf0d9b1c4cbde212fde02965\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620057d9380380620057d9833981016040819052620000349162000104565b60028054600160a060020a031916600160a060020a0383161790556008805460ff191690556200007f62000070640100000000620000a6810204565b640100000000620000aa810204565b50600980546001018155600052600c805460ff191660ff9290921691909117905562000153565b3390565b60088054600160a060020a0383811661010081810261010060a860020a031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600080604083850312156200011857600080fd5b825160ff811681146200012a57600080fd5b6020840151909250600160a060020a03811681146200014857600080fd5b809150509250929050565b61567680620001636000396000f3fe60806040526004361062000250576000357c010000000000000000000000000000000000000000000000000000000090048063710a676f116200014c578063cb3097e711620000ca578063e38f1ead1162000095578063e38f1ead14620006d6578063e6dcaca814620006ee578063eee608a41462000715578063f2fde38b146200074f578063f3fef3a3146200077457600080fd5b8063cb3097e71462000625578063d5e788291462000647578063dbce2465146200067b578063dff4343414620006a057600080fd5b80638da5cb5b11620001175780638da5cb5b146200057b57806393a5bc4114620005a057806395987e8114620005c5578063ab53249414620005dd578063bf9d486a14620005f457600080fd5b8063710a676f14620004f4578063715018a614620005175780637f4497d8146200052f5780638456cb59146200056357600080fd5b80633d15cc6d11620001da57806350a4043911620001a557806350a40439146200044657806355e8734e146200046b5780635c975abb14620004905780635d3757e214620004aa5780636a95d21414620004cf57600080fd5b80633d15cc6d14620003cf5780633f4ba83a14620003f157806346f51d8614620004095780634da97ac3146200042157600080fd5b80631dffa3dc116200021b5780631dffa3dc146200032557806323d75d8a146200035b57806338624bf514620003725780633adbb5af146200039757600080fd5b8063017e7e58146200027557806316b0232e14620002b4578063176f836b14620002db5780631a1a4cbe146200030057600080fd5b3662000270576002546200026e90600160a060020a03163462000799565b005b600080fd5b3480156200028257600080fd5b506002546200029790600160a060020a031681565b604051600160a060020a0390911681526020015b60405180910390f35b348015620002c157600080fd5b50620002cc60045481565b604051908152602001620002ab565b348015620002e857600080fd5b506200026e620002fa36600462003e2a565b620008c8565b3480156200030d57600080fd5b506200026e6200031f36600462003e54565b620008d7565b3480156200033257600080fd5b506200034a6200034436600462003e2a565b6200091d565b6040519015158152602001620002ab565b3480156200036857600080fd5b50600554620002cc565b3480156200037f57600080fd5b506200034a6200039136600462003e93565b62000a0b565b348015620003a457600080fd5b50620003bc620003b636600462003ee3565b62000ca4565b60405160ff9091168152602001620002ab565b348015620003dc57600080fd5b506003546200029790600160a060020a031681565b348015620003fe57600080fd5b506200026e62000d08565b3480156200041657600080fd5b506200026e62000d1e565b3480156200042e57600080fd5b506200034a6200044036600462003f84565b62000e6c565b3480156200045357600080fd5b506200026e6200046536600462003e2a565b62001104565b3480156200047857600080fd5b506200026e6200048a36600462004038565b62001113565b3480156200049d57600080fd5b5060085460ff166200034a565b348015620004b757600080fd5b506200034a620004c936600462003e2a565b620011ce565b348015620004dc57600080fd5b506200026e620004ee36600462004038565b62001438565b3480156200050157600080fd5b50600354620003bc9060a060020a900460ff1681565b3480156200052457600080fd5b506200026e62001519565b3480156200053c57600080fd5b50620005546200054e36600462003e2a565b6200152f565b604051620002ab919062004379565b3480156200057057600080fd5b506200026e6200157c565b3480156200058857600080fd5b506008546101009004600160a060020a031662000297565b348015620005ad57600080fd5b506200034a620005bf36600462003e2a565b62001590565b348015620005d257600080fd5b506200026e6200170e565b620002cc620005ee36600462004405565b620017e0565b3480156200060157600080fd5b50620002cc620006133660046200454a565b600a6020526000908152604090205481565b3480156200063257600080fd5b506001546200029790600160a060020a031681565b3480156200065457600080fd5b506200066c6200066636600462003e2a565b62001a33565b604051620002ab919062004568565b3480156200068857600080fd5b506200026e6200069a3660046200457d565b62001a70565b348015620006ad57600080fd5b50620006c5620006bf36600462003e2a565b62001b77565b604051620002ab93929190620045d3565b348015620006e357600080fd5b50620002cc60005481565b348015620006fb57600080fd5b506200070662001bb8565b604051620002ab9190620045ff565b3480156200072257600080fd5b5062000297620007343660046200454a565b600d60205260009081526040902054600160a060020a031681565b3480156200075c57600080fd5b506200026e6200076e3660046200454a565b62001bc9565b3480156200078157600080fd5b506200026e6200079336600462003ee3565b62001c5f565b3031811115620007f35760405160e560020a62461bcd02815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064015b60405180910390fd5b600082600160a060020a03168260405160006040518083038185875af1925050503d806000811462000842576040519150601f19603f3d011682016040523d82523d6000602084013e62000847565b606091505b5050905080620008c35760405160e560020a62461bcd02815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401620007ea565b505050565b620008d262001cdb565b600455565b620008e162001d51565b604080518082019091526001815260f860020a60370260208201526200090f9060ff83169060649062001db6565b6200091a8162001dca565b50565b60006200092962001e05565b600554604080518082019091526001815260f860020a603702602082015283919062000959908390839062001e5d565b6000806000806200096a8862001e6c565b93509350935093506000600d6000620009803390565b600160a060020a0390811682526020820192909252604001600020546002549082169250620009ba9183918591879189918b91166200211b565b604080518a8152602081018790529081018490527f84b8c0222d4c1d44e21e21825e6cd8cde10e6157958e14a5395cb00841bdbc25906060015b60405180910390a150600198975050505050505050565b600062000a1762001e05565b600062000a2433620021cc565b60ff161162000a4a5760405160e560020a62461bcd028152600401620007ea9062004664565b600554604080518082019091526001815260f860020a603702602082015285919062000a7a908390839062001e5d565b85600160006005838154811062000a955762000a956200469b565b600091825260209091206009909102016005015460a060020a900460ff16600481111562000ac75762000ac7620040cd565b905062000b2282600481111562000ae25762000ae2620040cd565b60408051808201909152600281527f3132000000000000000000000000000000000000000000000000000000000000602082015260ff841691906200225d565b600062000b2f8a62002271565b9050336000891562000b42578962000b49565b825160c001515b9050600061ffff8c161562000b765762000b6b61ffff8d1662015180620046cd565b62ffffff1662000b7d565b835160a001515b905062000b93846000015160c001518462002677565b62000b9e836200275a565b60008c61ffff1611801562000bba57506301e133808c61ffff16105b62000bf25760405160e560020a62461bcd028152602060048201526001602482015260f860020a6037026044820152606401620007ea565b62000c00838e838562002871565b600160a060020a0383166000908152600760205260409020805467ffffffffffffffff19164263ffffffff16179055835160c00151604080518f8152602081019290925281018c905267ffffffffffffffff82166060820152600160a060020a038416907fcb3a8b1b7488bcb753797634e76ecdb5e46307f2bab7007ca115fd2efdd5676d9060800160405180910390a25060019c9b505050505050505050505050565b600554604080518082019091526001815260f860020a6037026020820152600091839162000cd6908390839062001e5d565b600160a060020a038516600090815260066020908152604080832087845290915290205460ff1692505b505092915050565b62000d1262001d51565b62000d1c62002999565b565b60408051808201909152600281527f323200000000000000000000000000000000000000000000000000000000000060208201526000908162000d6133620029ed565b600281111562000d755762000d75620040cd565b14819062000d9b5760405160e560020a62461bcd028152600401620007ea9190620046ef565b5060098054336000818152600a602090815260408083208590558051606081018252600180825292810186905290810184905281850186559490915283517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af600385020180549395939092839160ff19169083600281111562000e225762000e22620040cd565b0217905550602082015160018201556040909101516002909101805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0390921691909117905550505050565b600062000e7862001e05565b600554604080518082019091526001815260f860020a603702602082015284919062000ea8908390839062001e5d565b84600160006005838154811062000ec35762000ec36200469b565b600091825260209091206009909102016005015460a060020a900460ff16600481111562000ef55762000ef5620040cd565b905062000f1082600481111562000ae25762000ae2620040cd565b600062000f1d8962002271565b805160e0015190915062000f3a90335b8360600151600162002a38565b62000f8f60016040518060400160405280600181526020017f3200000000000000000000000000000000000000000000000000000000000000815250600084602001515162002af1909392919063ffffffff16565b5060005b88518160ff161015620010c2576000898260ff168151811062000fba5762000fba6200469b565b602002602001015190506200104160006040518060400160405280600181526020017f380000000000000000000000000000000000000000000000000000000000000081525085602001518460ff16815181106200101c576200101c6200469b565b602002602001015160400151600160a060020a031662002b1e9092919063ffffffff16565b600083602001518260ff16815181106200105f576200105f6200469b565b6020026020010151600001519050620010798c8362002b3f565b836000015160a0015167ffffffffffffffff168167ffffffffffffffff161115620010aa57620010aa8c8262002bab565b50508080620010b99062004704565b91505062000f93565b50620010d089600262002c00565b507f3e1487bbb756f53171141096103d2b395d2c1cbe91cd7a53c7594c81d05097e98989604051620009f492919062004726565b6200110e62001cdb565b600055565b6200111d62001d51565b60005b8151811015620011ca5760006009600a60008585815181106200114757620011476200469b565b6020026020010151600160a060020a0316600160a060020a0316815260200190815260200160002054815481106200118357620011836200469b565b60009182526020909120600390910201805460ff19166001836002811115620011b057620011b0620040cd565b021790555080620011c18162004779565b91505062001120565b5050565b600080620011dc33620021cc565b60ff1611620012025760405160e560020a62461bcd028152600401620007ea9062004664565b600554604080518082019091526001815260f860020a603702602082015283919062001232908390839062001e5d565b6200123c62001e05565b8360026000600583815481106200125757620012576200469b565b600091825260209091206009909102016005015460a060020a900460ff166004811115620012895762001289620040cd565b9050620012a482600481111562000ae25762000ae2620040cd565b6000620012b18862002271565b3360008181526006602090815260408083208d8452909152812054929350909160ff1690506200134c60006040518060400160405280600181526020017f390000000000000000000000000000000000000000000000000000000000000081525085602001518460ff16815181106200132e576200132e6200469b565b602002602001015160600151151562002c6e9092919063ffffffff16565b8260200151516001036200137257620013678a600362002c00565b98505050506200142e565b8251606001516000906200138890600162004795565b60ff16600203620013a657506002620013a38b600362002c00565b99505b835160600151600290620013bc90600162004795565b60ff161015620013cd575060019850885b620013d98b8262002c80565b620013e58b8362002cc0565b82600160a060020a03167f125cc128025455cb458dc6ba80f03fcab9542337ffb7c6c798a2b3bc4d2fa20c8c6040516200142191815260200190565b60405180910390a2505050505b5050505050919050565b6200144262001d51565b60005b8151811015620011ca5760008282815181106200146657620014666200469b565b602090810291909101810151600160a060020a0381166000908152600a90925260409091205490915060016200149c83620029ed565b6002811115620014b057620014b0620040cd565b036200150157600260098281548110620014ce57620014ce6200469b565b60009182526020909120600390910201805460ff19166001836002811115620014fb57620014fb620040cd565b02179055505b50508080620015109062004779565b91505062001445565b6200152362001d51565b62000d1c600062002d2c565b6200153962003ca5565b600554604080518082019091526001815260f860020a603702602082015283919062001569908390839062001e5d565b620015748462002271565b949350505050565b6200158662001d51565b62000d1c62002d93565b60006200159c62001e05565b816003600060058381548110620015b757620015b76200469b565b600091825260209091206009909102016005015460a060020a900460ff166004811115620015e957620015e9620040cd565b90506200160482600481111562000ae25762000ae2620040cd565b600554604080518082019091526001815260f860020a603702602082015286919062001634908390839062001e5d565b6000620016418862002271565b805160e0015190915062001656903362000f2d565b6200166388600462002c00565b506000806200167a836000015160c0015162002dd3565b845160e00151600160a060020a039081166000908152600d6020908152604082205490880151600254959750939550821693620016ca93859390928892670de0b6b3a7640000890192166200211b565b6040518b81527f02244c8529cb95e213ee542e76e7776342b3dabd10203d01472bbf4441be89299060200160405180910390a15060019a9950505050505050505050565b336000818152600a602052604090205480620017705760405160e560020a62461bcd02815260206004820152600260248201527f32330000000000000000000000000000000000000000000000000000000000006044820152606401620007ea565b600981815481106200178657620017866200469b565b600091825260208083206003909202909101805460ff1916815560018101839055600201805473ffffffffffffffffffffffffffffffffffffffff19169055600160a060020a03939093168152600a909252506040812055565b6000620017ec62001e05565b336000908152600d6020526040902054600160a060020a03168062001895576003546040513391600160a060020a031690620018289062003d14565b600160a060020a03928316815291166020820152604001604051809103906000f0801580156200185c573d6000803e3d6000fd5b50336000908152600d60205260409020805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03831617905590505b600354620019a490600160a060020a031633836200199b670de0b6b3a76400006040518060400160405280600281526020017f31340000000000000000000000000000000000000000000000000000000000008152506000620019928c6040518060400160405280600281526020017f31340000000000000000000000000000000000000000000000000000000000008152506001620019896000546040518060400160405280600281526020017f3134000000000000000000000000000000000000000000000000000000000000815250600062001989620019753390565b600354600160a060020a0316903062002e63565b92919062002af1565b92919062002ef5565b92919062002f05565b50670de0b6b3a763ffff1990930192620019e689898989620019ce61ffff8b1662015180620046cd565b62ffffff168933620019e08b62002faf565b62003041565b91507f19cb863002dfd6c0c25bbc389f38108e7a792499c6dbf601f5086ca3cc9150068285838960405162001a1f9493929190620047b1565b60405180910390a150979650505050505050565b600554604080518082019091526001815260f860020a6037026020820152606091839162001a65908390839062001e5d565b6200157484620033a5565b62001a7a62001d51565b600c5460ff1662001ad15760405160e560020a62461bcd02815260206004820152600260248201527f31330000000000000000000000000000000000000000000000000000000000006044820152606401620007ea565b600c805460ff1690600062001ae683620047eb565b91906101000a81548160ff021916908360ff1602179055505062001b718484848460009290925560038054600160a060020a0392831673ffffffffffffffffffffffffffffffffffffffff1960ff90961660a060020a02861674ffffffffffffffffffffffffffffffffffffffffff1990921691909117179055600180549290911691909216179055565b50505050565b6009818154811062001b8857600080fd5b600091825260209091206003909102018054600182015460029092015460ff9091169250600160a060020a031683565b606062001bc462003491565b905090565b62001bd362001d51565b600160a060020a03811662001c545760405160e560020a62461bcd02815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401620007ea565b6200091a8162002d2c565b62001c6962001d51565b303181111562001c7857600080fd5b600082600160a060020a03168260405160006040518083038185875af1925050503d806000811462001cc7576040519150601f19603f3d011682016040523d82523d6000602084013e62001ccc565b606091505b5050905080620008c357600080fd5b6008546101009004600160a060020a0316600160a060020a031633600160a060020a03161462000d1c5760405160e560020a62461bcd02815260206004820152600260248201527f31370000000000000000000000000000000000000000000000000000000000006044820152606401620007ea565b600854600160a060020a0361010090910416331462000d1c5760405160e560020a62461bcd02815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620007ea565b620008c38260ff168460ff161082620038b8565b62001dd462001cdb565b6003805460ff90921660a060020a0274ff000000000000000000000000000000000000000019909216919091179055565b60085460ff161562000d1c5760405160e560020a62461bcd02815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401620007ea565b620008c38284111582620038b8565b600554604080518082019091526001815260f860020a60370260208201526000918291829160609186919062001ea6908390839062001e5d565b600062001eb38862002271565b905080602001519350806000015160c00151965062001f24816000015160e001516040518060400160405280600181526020017f330000000000000000000000000000000000000000000000000000000000000081525033600160a060020a0316620038dd9092919063ffffffff16565b80516101000151600390600481111562001f425762001f42620040cd565b60ff161062001f975760405160e560020a62461bcd02815260206004820152600260248201527f31360000000000000000000000000000000000000000000000000000000000006044820152606401620007ea565b600281516101000151600481111562001fb45762001fb4620040cd565b148062001fe8575080516080015162001fd190620151806200480b565b67ffffffffffffffff164267ffffffffffffffff16115b15620020385760035460a060020a900460ff1680156200203657600060646200201560ff84168b62004836565b62002021919062004850565b98899003986064600f82020498508890039650505b505b600588815481106200204e576200204e6200469b565b600091825260208220600990910201805460ff1916815590818162002077600183018262003d22565b6200208760028301600062003d22565b5060038101805470ffffffffffffffffffffffffffffffffff191690556000600482018190556005909101805474ffffffffffffffffffffffffffffffffffffffffff19169055620020de90600684019062003d61565b620020ee60078301600062003d84565b50600801805473ffffffffffffffffffffffffffffffffffffffff19169055509496939550919350919050565b620021c486632d5378e17c01000000000000000000000000000000000000000000000000000000000287878787876040516024016200215f95949392919062004876565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152620038fd565b505050505050565b6001546040517fafe7b302000000000000000000000000000000000000000000000000000000008152600160a060020a038381166004830152600092169063afe7b30290602401602060405180830381865afa15801562002231573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620022579190620048b8565b92915050565b620008c38260ff168460ff161482620038b8565b6200227b62003ca5565b600582815481106200229157620022916200469b565b60009182526020909120604080516101a081019091526009909202018054829060808201908390829060ff166002811115620022d157620022d1620040cd565b6002811115620022e557620022e5620040cd565b8152602001600182018054620022fb90620048d8565b80601f01602080910402602001604051908101604052809291908181526020018280546200232990620048d8565b80156200237a5780601f106200234e576101008083540402835291602001916200237a565b820191906000526020600020905b8154815290600101906020018083116200235c57829003601f168201915b505050505081526020016002820180546200239590620048d8565b80601f0160208091040260200160405190810160405280929190818152602001828054620023c390620048d8565b8015620024145780601f10620023e85761010080835404028352916020019162002414565b820191906000526020600020905b815481529060010190602001808311620023f657829003601f168201915b5050509183525050600382015460ff808216602084015267ffffffffffffffff6101008304811660408501526901000000000000000000909204909116606083015260048084015460808401526005840154600160a060020a03811660a085015260c09093019260a060020a900490911690811115620024985762002498620040cd565b6004811115620024ac57620024ac620040cd565b81525050815260200160068201805480602002602001604051908101604052809291908181526020016000905b82821015620025715760008481526020908190206040805160a08101825260038602909201805467ffffffffffffffff16835260018082015484860152600290910154600160a060020a0381169284019290925260ff60a060020a83048116151560608501527501000000000000000000000000000000000000000000909204909116151560808301529083529092019101620024d9565b50505050815260200160078201805480602002602001604051908101604052809291908181526020016000905b8282101562002654578382906000526020600020018054620025c090620048d8565b80601f0160208091040260200160405190810160405280929190818152602001828054620025ee90620048d8565b80156200263f5780601f1062002613576101008083540402835291602001916200263f565b820191906000526020600020905b8154815290600101906020018083116200262157829003601f168201915b5050505050815260200190600101906200259e565b5050509082525060089190910154600160a060020a031660209091015292915050565b6001546040517fe4da53e8000000000000000000000000000000000000000000000000000000008152600160a060020a038381166004830152600092169063e4da53e890602401602060405180830381865afa158015620026dc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002702919062004917565b905080600103620008c35760045415620008c35760045460408051808201909152600181527f34000000000000000000000000000000000000000000000000000000000000006020820152620008c391859162001e5d565b60006200276782620021cc565b90508060ff166001036200284857600160a060020a03821660009081526007602052604081205467ffffffffffffffff1690819003620027da57600160a060020a0383166000908152600760205260409020805467ffffffffffffffff19164267ffffffffffffffff1617905562002846565b620027e981624f1a006200480b565b67ffffffffffffffff164210620028465760405160e560020a62461bcd02815260206004820152600260248201527f31300000000000000000000000000000000000000000000000000000000000006044820152606401620007ea565b505b8060ff16600003620011ca5760405160e560020a62461bcd028152600401620007ea9062004664565b6200287d8484620039ec565b50600583815481106200289457620028946200469b565b600091825260208083206040805160a08101825267ffffffffffffffff9788168152808401968752600160a060020a03998a169181019182526060810186815260808201878152600660099097029094019590950180546001818101835591885294909620905160039094020180549390971667ffffffffffffffff1990931692909217865593519285019290925590516002909301805491519251151575010000000000000000000000000000000000000000000275ff0000000000000000000000000000000000000000001993151560a060020a0274ffffffffffffffffffffffffffffffffffffffffff19909316949096169390931717169290921790915550565b620029a362003a35565b6008805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b604051600160a060020a03909116815260200160405180910390a1565b600160a060020a0381166000908152600a6020526040812054600980548290811062002a1d5762002a1d6200469b565b600091825260209091206003909102015460ff169392505050565b600084600160a060020a031684600160a060020a03160362002a58575060015b8015801562002a645750815b1562002a9857600160a060020a0383161562002a985782600160a060020a031684600160a060020a03160362002a98575060015b8062002aea5760405160e560020a62461bcd02815260206004820152600260248201527f31350000000000000000000000000000000000000000000000000000000000006044820152606401620007ea565b5050505050565b600062002b028486101584620038b8565b60ff82161562002b13578362002b15565b845b95945050505050565b620008c382600160a060020a031684600160a060020a0316141582620038b8565b60016005838154811062002b575762002b576200469b565b90600052602060002090600902016006018260ff168154811062002b7f5762002b7f6200469b565b906000526020600020906003020160020160156101000a81548160ff0219169083151502179055505050565b806005838154811062002bc25762002bc26200469b565b906000526020600020906009020160000160030160096101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505050565b6000816005848154811062002c195762002c196200469b565b60009182526020909120600560099092020101805474ff0000000000000000000000000000000000000000191660a060020a83600481111562002c605762002c60620040cd565b021790555060019392505050565b620008c38215158415151482620038b8565b806005838154811062002c975762002c976200469b565b60009182526020909120600990910201600301805460ff191660ff929092169190911790555050565b60016005838154811062002cd85762002cd86200469b565b90600052602060002090600902016006018260ff168154811062002d005762002d006200469b565b906000526020600020906003020160020160146101000a81548160ff0219169083151502179055505050565b60088054600160a060020a0383811661010081810274ffffffffffffffffffffffffffffffffffffffff001985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b62002d9d62001e05565b6008805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258620029d03390565b600080670de0b6b3a764000083101562002e335760405160e560020a62461bcd02815260206004820152601460248201527f496e76616c69642067726f737320616d6f756e740000000000000000000000006044820152606401620007ea565b606462002e4284600562004836565b62002e4e919062004850565b905062002e5c818462004931565b9150915091565b6040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152600160a060020a03838116600483015282811660248301526000919085169063dd62ed3e90604401602060405180830381865afa15801562002ecf573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001574919062004917565b600062002b0284861184620038b8565b6000841562002b13576040517f23b872dd000000000000000000000000000000000000000000000000000000008152600160a060020a0384811660048301528381166024830152604482018790528516906323b872dd906064016020604051808303816000875af115801562002f7f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002fa5919062004947565b62002b1357600080fd5b6009546000908210620030085760405160e560020a62461bcd02815260206004820152600260248201527f32310000000000000000000000000000000000000000000000000000000000006044820152606401620007ea565b600982815481106200301e576200301e6200469b565b6000918252602090912060026003909202010154600160a060020a031692915050565b600060038960ff16106200309b5760405160e560020a62461bcd02815260206004820152600260248201527f31390000000000000000000000000000000000000000000000000000000000006044820152606401620007ea565b50600580546001810182556000919091526040805161012081019091528060ff8b166002811115620030d157620030d1620040cd565b6002811115620030e557620030e5620040cd565b8152602001620030f58a62003a8c565b8152602001620031058862003a8c565b8152600060208201526040014267ffffffffffffffff90811682528716602082015260408101869052600160a060020a03851660608201526080016001815250600582815481106200315b576200315b6200469b565b6000918252602090912082516009909202018054909190829060ff191660018360028111156200318f576200318f620040cd565b021790555060208201516001820190620031aa9082620049b5565b5060408201516002820190620031c19082620049b5565b506060820151600382018054608085015160a086015167ffffffffffffffff90811669010000000000000000000270ffffffffffffffff000000000000000000199190921661010090810268ffffffffffffffffff1990941660ff90961695909517929092179190911617905560c083015160048084019190915560e0840151600584018054600160a060020a0390921673ffffffffffffffffffffffffffffffffffffffff198316811782559386015193909274ffffffffffffffffffffffffffffffffffffffffff19909216179060a060020a908490811115620032ab57620032ab620040cd565b02179055509050508160058281548110620032ca57620032ca6200469b565b906000526020600020906009020160080160006101000a815481600160a060020a030219169083600160a060020a0316021790555060005b87518160ff1610156200339857600582815481106200332557620033256200469b565b906000526020600020906009020160070162003360898360ff16815181106200335257620033526200469b565b602002602001015162003a8c565b81546001810183556000928352602090922090910190620033829082620049b5565b50806200338f8162004704565b91505062003302565b5098975050505050505050565b606060058281548110620033bd57620033bd6200469b565b9060005260206000209060090201600601805480602002602001604051908101604052809291908181526020016000905b82821015620034865760008481526020908190206040805160a08101825260038602909201805467ffffffffffffffff16835260018082015484860152600290910154600160a060020a0381169284019290925260ff60a060020a83048116151560608501527501000000000000000000000000000000000000000000909204909116151560808301529083529092019101620033ee565b505050509050919050565b60606005805480602002602001604051908101604052809291908181526020016000905b82821015620038af57600084815260209020604080516101a08101909152600984029091018054829060808201908390829060ff166002811115620034fe57620034fe620040cd565b6002811115620035125762003512620040cd565b81526020016001820180546200352890620048d8565b80601f01602080910402602001604051908101604052809291908181526020018280546200355690620048d8565b8015620035a75780601f106200357b57610100808354040283529160200191620035a7565b820191906000526020600020905b8154815290600101906020018083116200358957829003601f168201915b50505050508152602001600282018054620035c290620048d8565b80601f0160208091040260200160405190810160405280929190818152602001828054620035f090620048d8565b8015620036415780601f10620036155761010080835404028352916020019162003641565b820191906000526020600020905b8154815290600101906020018083116200362357829003601f168201915b5050509183525050600382015460ff808216602084015267ffffffffffffffff6101008304811660408501526901000000000000000000909204909116606083015260048084015460808401526005840154600160a060020a03811660a085015260c09093019260a060020a900490911690811115620036c557620036c5620040cd565b6004811115620036d957620036d9620040cd565b81525050815260200160068201805480602002602001604051908101604052809291908181526020016000905b828210156200379e5760008481526020908190206040805160a08101825260038602909201805467ffffffffffffffff16835260018082015484860152600290910154600160a060020a0381169284019290925260ff60a060020a8304811615156060850152750100000000000000000000000000000000000000000090920490911615156080830152908352909201910162003706565b50505050815260200160078201805480602002602001604051908101604052809291908181526020016000905b8282101562003881578382906000526020600020018054620037ed90620048d8565b80601f01602080910402602001604051908101604052809291908181526020018280546200381b90620048d8565b80156200386c5780601f1062003840576101008083540402835291602001916200386c565b820191906000526020600020905b8154815290600101906020018083116200384e57829003601f168201915b505050505081526020019060010190620037cb565b5050509082525060089190910154600160a060020a03166020918201529082526001929092019101620034b5565b50505050905090565b8082620008c35760405160e560020a62461bcd028152600401620007ea9190620046ef565b620008c382600160a060020a031684600160a060020a03161482620038b8565b600062003954826040518060400160405280601f81526020017f5361666543616c6c3a206c6f772d6c6576656c2063616c6c206661696c65640081525085600160a060020a031662003ab79092919063ffffffff16565b805190915015620008c3578080602001905181019062003975919062004947565b620008c35760405160e560020a62461bcd02815260206004820152602960248201527f5361666543616c6c3a204552433230206f7065726174696f6e20646964206e6f60448201527f74207375636365656400000000000000000000000000000000000000000000006064820152608401620007ea565b600080620039fa8362003ac8565b600160a060020a03851660009081526006602090815260408083208784529091529020805460ff831660ff1990911617905591505092915050565b60085460ff1662000d1c5760405160e560020a62461bcd02815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401620007ea565b60608160405160200162003aa19190620046ef565b6040516020818303038152906040529050919050565b606062001574848460008562003afa565b60006005828154811062003ae05762003ae06200469b565b600091825260209091206006600990920201015492915050565b6060303183111562003b785760405160e560020a62461bcd02815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401620007ea565b60008086600160a060020a0316858760405162003b96919062004a88565b60006040518083038185875af1925050503d806000811462003bd5576040519150601f19603f3d011682016040523d82523d6000602084013e62003bda565b606091505b509150915062003bed8783838762003bf8565b979650505050505050565b6060831562003c6f57825160000362003c6757600160a060020a0385163b62003c675760405160e560020a62461bcd02815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401620007ea565b508162001574565b62001574838381511562003c865781518083602001fd5b8060405160e560020a62461bcd028152600401620007ea9190620046ef565b604080516101a08101909152600060808201818152606060a0840181905260c084015260e0830182905261010083018290526101208301829052610140830182905261016083018290526101808301919091528190815260606020820181905260408201819052600091015290565b610b9a8062004aa783390190565b50805462003d3090620048d8565b6000825580601f1062003d41575050565b601f0160209004906000526020600020908101906200091a919062003da4565b50805460008255600302906000526020600020908101906200091a919062003dbf565b50805460008255906000526020600020908101906200091a919062003e09565b5b8082111562003dbb576000815560010162003da5565b5090565b5b8082111562003dbb57805467ffffffffffffffff191681556000600182015560028101805475ffffffffffffffffffffffffffffffffffffffffffff1916905560030162003dc0565b8082111562003dbb57600062003e20828262003d22565b5060010162003e09565b60006020828403121562003e3d57600080fd5b5035919050565b60ff811681146200091a57600080fd5b60006020828403121562003e6757600080fd5b813562003e748162003e44565b9392505050565b803561ffff8116811462003e8e57600080fd5b919050565b60008060006060848603121562003ea957600080fd5b8335925062003ebb6020850162003e7b565b9150604084013590509250925092565b8035600160a060020a038116811462003e8e57600080fd5b6000806040838503121562003ef757600080fd5b62003f028362003ecb565b946020939093013593505050565b60e060020a634e487b7102600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171562003f555762003f5562003f10565b604052919050565b600067ffffffffffffffff82111562003f7a5762003f7a62003f10565b5060209081020190565b6000806040838503121562003f9857600080fd5b8235915060208084013567ffffffffffffffff81111562003fb857600080fd5b8401601f8101861362003fca57600080fd5b803562003fe162003fdb8262003f5d565b62003f29565b8181529083028201830190838101908883111562003ffe57600080fd5b928401925b8284101562004029578335620040198162003e44565b8252928401929084019062004003565b80955050505050509250929050565b600060208083850312156200404c57600080fd5b823567ffffffffffffffff8111156200406457600080fd5b8301601f810185136200407657600080fd5b80356200408762003fdb8262003f5d565b81815290830282018301908381019087831115620040a457600080fd5b928401925b8284101562003bed57620040bd8462003ecb565b82529284019290840190620040a9565b60e060020a634e487b7102600052602160045260246000fd5b600381106200091a576200091a620040cd565b6200410481620040e6565b9052565b60005b83811015620041255781810151838201526020016200410b565b50506000910152565b600081518084526200414881602086016020860162004108565b601f01601f19169290920160200192915050565b60058110620041045762004104620040cd565b600081518084526020808501945080840160005b83811015620041e2578151805167ffffffffffffffff1688528381015184890152604080820151600160a060020a03169089015260608082015115159089015260809081015115159088015260a0909601959082019060010162004183565b509495945050505050565b600081518084526020808501808196508284028101915082860160005b8581101562004238578284038952620042258483516200412e565b988501989350908401906001016200420a565b5091979650505050505050565b60008151608084526200425d608085018251620040f9565b60208101516101208060a08701526200427b6101a08701836200412e565b91506040830151607f198784030160c08801526200429a83826200412e565b9250506060830151620042b260e088018260ff169052565b506080830151610100620042d18189018367ffffffffffffffff169052565b60a085015167ffffffffffffffff16928801929092525060c083015161014087015260e0830151600160a060020a031661016087015290910151906200431c6101808601836200415c565b6020840151915084810360208601526200433781836200416f565b91505060408301518482036040860152620043538282620041ed565b9150506060830151620043716060860182600160a060020a03169052565b509392505050565b60208152600062003e74602083018462004245565b600082601f830112620043a057600080fd5b813567ffffffffffffffff811115620043bd57620043bd62003f10565b620043d2601f8201601f191660200162003f29565b818152846020838601011115620043e857600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600080600060e0888a0312156200442157600080fd5b6200442d883562003e44565b87359650602088013567ffffffffffffffff808211156200444d57600080fd5b6200445b8b838c016200438e565b975060408a01359150808211156200447257600080fd5b818a0191508a601f8301126200448757600080fd5b81356200449862003fdb8262003f5d565b818152602091820284018201918101908d831115620044b657600080fd5b602085015b83811015620044f4578481351115620044d357600080fd5b620044e58f602083358901016200438e565b835260209283019201620044bb565b509850505060608a01359150808211156200450e57600080fd5b506200451d8a828b016200438e565b9450506200452e6080890162003e7b565b925060a0880135915060c0880135905092959891949750929550565b6000602082840312156200455d57600080fd5b62003e748262003ecb565b60208152600062003e7460208301846200416f565b600080600080608085870312156200459457600080fd5b8435620045a18162003e44565b935060208501359250620045b86040860162003ecb565b9150620045c86060860162003ecb565b905092959194509250565b60608101620045e285620040e6565b9381526020810192909252600160a060020a031660409091015290565b600060208083018184528085518083526040860191506040848202870101925083870160005b828110156200465757603f198886030184526200464485835162004245565b9450928501929085019060010162004625565b5092979650505050505050565b60208082526001908201527f3100000000000000000000000000000000000000000000000000000000000000604082015260600190565b60e060020a634e487b7102600052603260045260246000fd5b60e060020a634e487b7102600052601160045260246000fd5b62ffffff81811683821602808216919082811462000d005762000d00620046b4565b60208152600062003e7460208301846200412e565b600060ff821660ff81036200471d576200471d620046b4565b60010192915050565b6000604082018483526020604081850152818551808452606086019150828701935060005b818110156200476c57845160ff16835293830193918301916001016200474b565b5090979650505050505050565b6000600182016200478e576200478e620046b4565b5060010190565b60ff8181168382160190811115620022575762002257620046b4565b848152836020820152600160a060020a0383166040820152608060608201526000620047e160808301846200412e565b9695505050505050565b600060ff821680620048015762004801620046b4565b6000190192915050565b67ffffffffffffffff8181168382160190808211156200482f576200482f620046b4565b5092915050565b8082028115828204841417620022575762002257620046b4565b600082620048715760e060020a634e487b7102600052601260045260246000fd5b500490565b60a0815260006200488b60a08301886200416f565b9050856020830152846040830152836060830152600160a060020a03831660808301529695505050505050565b600060208284031215620048cb57600080fd5b815162003e748162003e44565b600281046001821680620048ed57607f821691505b602082108103620049115760e060020a634e487b7102600052602260045260246000fd5b50919050565b6000602082840312156200492a57600080fd5b5051919050565b81810381811115620022575762002257620046b4565b6000602082840312156200495a57600080fd5b8151801515811462003e7457600080fd5b601f821115620008c3576000818152602081206020601f86010481016020861015620049945750805b6020601f860104820191505b81811015620021c457828155600101620049a0565b815167ffffffffffffffff811115620049d257620049d262003f10565b620049ea81620049e38454620048d8565b846200496b565b602080601f83116001811462004a26576000841562004a095750858301515b60028086026008870290910a6000190419821617865550620021c4565b600085815260208120601f198616915b8281101562004a575788860151825594840194600190910190840162004a36565b508582101562004a7857878501516008601f88160260020a60001904191681555b5050505050600202600101905550565b6000825162004a9c81846020870162004108565b919091019291505056fe608060405234801561001057600080fd5b50604051610b9a380380610b9a83398101604081905261002f916100f6565b610051610043640100000000610086810204565b64010000000061008a810204565b6001805560048054600160a060020a03938416600160a060020a03199182161790915560058054929093169116179055610129565b3390565b60008054600160a060020a03838116600160a060020a0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8051600160a060020a03811681146100f157600080fd5b919050565b6000806040838503121561010957600080fd5b610112836100da565b9150610120602084016100da565b90509250929050565b610a62806101386000396000f3fe6080604052600436106100b2576000357c01000000000000000000000000000000000000000000000000000000009004806350188301116100765780635018830114610184578063715018a61461019a5780638da5cb5b146101b1578063f2fde38b146101cf578063f7462b2f146101ef57600080fd5b80631fccf672146100be5780632d5378e1146100fb5780632edd8b4d1461012b5780633b92f3df1461014f5780633ccfd60b1461017c57600080fd5b366100b957005b600080fd5b3480156100ca57600080fd5b506005546100de90600160a060020a031681565b604051600160a060020a0390911681526020015b60405180910390f35b34801561010757600080fd5b5061011b610116366004610811565b61020f565b60405190151581526020016100f2565b34801561013757600080fd5b5061014160035481565b6040519081526020016100f2565b34801561015b57600080fd5b5061014161016a36600461094b565b60066020526000908152604090205481565b61011b61038c565b34801561019057600080fd5b5061014160025481565b3480156101a657600080fd5b506101af61042b565b005b3480156101bd57600080fd5b50600054600160a060020a03166100de565b3480156101db57600080fd5b506101af6101ea36600461094b565b61043f565b3480156101fb57600080fd5b506004546100de90600160a060020a031681565b60006102196104d2565b600061022361052f565b875190915060006102348289610986565b905061024087896109ab565b8310156102975760405160e560020a62461bcd02815260206004820152601960248201527f547275737465653a2042616c616e63657320746f6f206c6f770000000000000060448201526064015b60405180910390fd5b86156102a7576102a785886105ce565b871561032b5760005b828110156103295760008a82815181106102cc576102cc6109c4565b6020026020010151604001519050826006600083600160a060020a0316600160a060020a03168152602001908152602001600020600082825461030f91906109ab565b909155508291506103219050816109dd565b9150506102b0565b505b851561037d578560066000610348600454600160a060020a031690565b600160a060020a0316600160a060020a03168152602001908152602001600020600082825461037791906109ab565b90915550505b50600198975050505050505050565b60006103966106bb565b33600081815260066020526040902054806103f65760405160e560020a62461bcd02815260206004820152601c60248201527f547275737465653a204e6f7468696e6720746f20776974686472617700000000604482015260640161028e565b600160a060020a03821660009081526006602052604081205561041982826105ce565b60019250505061042860018055565b90565b6104336104d2565b61043d6000610717565b565b6104476104d2565b600160a060020a0381166104c65760405160e560020a62461bcd02815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161028e565b6104cf81610717565b50565b600054600160a060020a0316331461043d5760405160e560020a62461bcd02815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161028e565b600080610544600554600160a060020a031690565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152909150600160a060020a038216906370a0823190602401602060405180830381865afa1580156105a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c891906109f6565b91505090565b600554600160a060020a03166040517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a03848116600483015260248201849052919091169063a9059cbb906044016020604051808303816000875af1158015610644573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106689190610a0f565b6106b75760405160e560020a62461bcd02815260206004820152601a60248201527f547275737465653a205769746864726177616c206661696c6564000000000000604482015260640161028e565b5050565b6002600154036107105760405160e560020a62461bcd02815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161028e565b6002600155565b60008054600160a060020a0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60e060020a634e487b7102600052604160045260246000fd5b60405160a0810167ffffffffffffffff811182821017156107b0576107b0610774565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156107df576107df610774565b604052919050565b8035600160a060020a03811681146107fe57600080fd5b919050565b80151581146104cf57600080fd5b600080600080600060a080878903121561082a57600080fd5b863567ffffffffffffffff8082111561084257600080fd5b818901915089601f83011261085657600080fd5b813560208282111561086a5761086a610774565b61087781828402016107b6565b8281529185028401810191818101908d84111561089357600080fd5b948201945b838610156109195786868f0312156108b05760008081fd5b6108b861078d565b863586811681146108c95760008081fd5b8152868401358482015260406108e08189016107e7565b908201526060878101356108f381610803565b9082015260808781013561090681610803565b9082015282529486019490820190610898565b9a50508a0135975050506040880135945050506060860135915061093f608087016107e7565b90509295509295909350565b60006020828403121561095d57600080fd5b610966826107e7565b9392505050565b60e060020a634e487b7102600052601160045260246000fd5b6000826109a65760e060020a634e487b7102600052601260045260246000fd5b500490565b808201808211156109be576109be61096d565b92915050565b60e060020a634e487b7102600052603260045260246000fd5b6000600182016109ef576109ef61096d565b5060010190565b600060208284031215610a0857600080fd5b5051919050565b600060208284031215610a2157600080fd5b81516109668161080356fea264697066735822122048063781cf8ece44bb94d5cc222558989658f8177522fbb46e76a45b5cb9311464736f6c63430008130033a26469706673582212201bf4de1720ce19d383ee167095de049da7610c45864bc93104bf723929cea97464736f6c63430008130033",
  "deployedBytecode": "0x60806040526004361062000250576000357c010000000000000000000000000000000000000000000000000000000090048063710a676f116200014c578063cb3097e711620000ca578063e38f1ead1162000095578063e38f1ead14620006d6578063e6dcaca814620006ee578063eee608a41462000715578063f2fde38b146200074f578063f3fef3a3146200077457600080fd5b8063cb3097e71462000625578063d5e788291462000647578063dbce2465146200067b578063dff4343414620006a057600080fd5b80638da5cb5b11620001175780638da5cb5b146200057b57806393a5bc4114620005a057806395987e8114620005c5578063ab53249414620005dd578063bf9d486a14620005f457600080fd5b8063710a676f14620004f4578063715018a614620005175780637f4497d8146200052f5780638456cb59146200056357600080fd5b80633d15cc6d11620001da57806350a4043911620001a557806350a40439146200044657806355e8734e146200046b5780635c975abb14620004905780635d3757e214620004aa5780636a95d21414620004cf57600080fd5b80633d15cc6d14620003cf5780633f4ba83a14620003f157806346f51d8614620004095780634da97ac3146200042157600080fd5b80631dffa3dc116200021b5780631dffa3dc146200032557806323d75d8a146200035b57806338624bf514620003725780633adbb5af146200039757600080fd5b8063017e7e58146200027557806316b0232e14620002b4578063176f836b14620002db5780631a1a4cbe146200030057600080fd5b3662000270576002546200026e90600160a060020a03163462000799565b005b600080fd5b3480156200028257600080fd5b506002546200029790600160a060020a031681565b604051600160a060020a0390911681526020015b60405180910390f35b348015620002c157600080fd5b50620002cc60045481565b604051908152602001620002ab565b348015620002e857600080fd5b506200026e620002fa36600462003e2a565b620008c8565b3480156200030d57600080fd5b506200026e6200031f36600462003e54565b620008d7565b3480156200033257600080fd5b506200034a6200034436600462003e2a565b6200091d565b6040519015158152602001620002ab565b3480156200036857600080fd5b50600554620002cc565b3480156200037f57600080fd5b506200034a6200039136600462003e93565b62000a0b565b348015620003a457600080fd5b50620003bc620003b636600462003ee3565b62000ca4565b60405160ff9091168152602001620002ab565b348015620003dc57600080fd5b506003546200029790600160a060020a031681565b348015620003fe57600080fd5b506200026e62000d08565b3480156200041657600080fd5b506200026e62000d1e565b3480156200042e57600080fd5b506200034a6200044036600462003f84565b62000e6c565b3480156200045357600080fd5b506200026e6200046536600462003e2a565b62001104565b3480156200047857600080fd5b506200026e6200048a36600462004038565b62001113565b3480156200049d57600080fd5b5060085460ff166200034a565b348015620004b757600080fd5b506200034a620004c936600462003e2a565b620011ce565b348015620004dc57600080fd5b506200026e620004ee36600462004038565b62001438565b3480156200050157600080fd5b50600354620003bc9060a060020a900460ff1681565b3480156200052457600080fd5b506200026e62001519565b3480156200053c57600080fd5b50620005546200054e36600462003e2a565b6200152f565b604051620002ab919062004379565b3480156200057057600080fd5b506200026e6200157c565b3480156200058857600080fd5b506008546101009004600160a060020a031662000297565b348015620005ad57600080fd5b506200034a620005bf36600462003e2a565b62001590565b348015620005d257600080fd5b506200026e6200170e565b620002cc620005ee36600462004405565b620017e0565b3480156200060157600080fd5b50620002cc620006133660046200454a565b600a6020526000908152604090205481565b3480156200063257600080fd5b506001546200029790600160a060020a031681565b3480156200065457600080fd5b506200066c6200066636600462003e2a565b62001a33565b604051620002ab919062004568565b3480156200068857600080fd5b506200026e6200069a3660046200457d565b62001a70565b348015620006ad57600080fd5b50620006c5620006bf36600462003e2a565b62001b77565b604051620002ab93929190620045d3565b348015620006e357600080fd5b50620002cc60005481565b348015620006fb57600080fd5b506200070662001bb8565b604051620002ab9190620045ff565b3480156200072257600080fd5b5062000297620007343660046200454a565b600d60205260009081526040902054600160a060020a031681565b3480156200075c57600080fd5b506200026e6200076e3660046200454a565b62001bc9565b3480156200078157600080fd5b506200026e6200079336600462003ee3565b62001c5f565b3031811115620007f35760405160e560020a62461bcd02815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064015b60405180910390fd5b600082600160a060020a03168260405160006040518083038185875af1925050503d806000811462000842576040519150601f19603f3d011682016040523d82523d6000602084013e62000847565b606091505b5050905080620008c35760405160e560020a62461bcd02815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401620007ea565b505050565b620008d262001cdb565b600455565b620008e162001d51565b604080518082019091526001815260f860020a60370260208201526200090f9060ff83169060649062001db6565b6200091a8162001dca565b50565b60006200092962001e05565b600554604080518082019091526001815260f860020a603702602082015283919062000959908390839062001e5d565b6000806000806200096a8862001e6c565b93509350935093506000600d6000620009803390565b600160a060020a0390811682526020820192909252604001600020546002549082169250620009ba9183918591879189918b91166200211b565b604080518a8152602081018790529081018490527f84b8c0222d4c1d44e21e21825e6cd8cde10e6157958e14a5395cb00841bdbc25906060015b60405180910390a150600198975050505050505050565b600062000a1762001e05565b600062000a2433620021cc565b60ff161162000a4a5760405160e560020a62461bcd028152600401620007ea9062004664565b600554604080518082019091526001815260f860020a603702602082015285919062000a7a908390839062001e5d565b85600160006005838154811062000a955762000a956200469b565b600091825260209091206009909102016005015460a060020a900460ff16600481111562000ac75762000ac7620040cd565b905062000b2282600481111562000ae25762000ae2620040cd565b60408051808201909152600281527f3132000000000000000000000000000000000000000000000000000000000000602082015260ff841691906200225d565b600062000b2f8a62002271565b9050336000891562000b42578962000b49565b825160c001515b9050600061ffff8c161562000b765762000b6b61ffff8d1662015180620046cd565b62ffffff1662000b7d565b835160a001515b905062000b93846000015160c001518462002677565b62000b9e836200275a565b60008c61ffff1611801562000bba57506301e133808c61ffff16105b62000bf25760405160e560020a62461bcd028152602060048201526001602482015260f860020a6037026044820152606401620007ea565b62000c00838e838562002871565b600160a060020a0383166000908152600760205260409020805467ffffffffffffffff19164263ffffffff16179055835160c00151604080518f8152602081019290925281018c905267ffffffffffffffff82166060820152600160a060020a038416907fcb3a8b1b7488bcb753797634e76ecdb5e46307f2bab7007ca115fd2efdd5676d9060800160405180910390a25060019c9b505050505050505050505050565b600554604080518082019091526001815260f860020a6037026020820152600091839162000cd6908390839062001e5d565b600160a060020a038516600090815260066020908152604080832087845290915290205460ff1692505b505092915050565b62000d1262001d51565b62000d1c62002999565b565b60408051808201909152600281527f323200000000000000000000000000000000000000000000000000000000000060208201526000908162000d6133620029ed565b600281111562000d755762000d75620040cd565b14819062000d9b5760405160e560020a62461bcd028152600401620007ea9190620046ef565b5060098054336000818152600a602090815260408083208590558051606081018252600180825292810186905290810184905281850186559490915283517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af600385020180549395939092839160ff19169083600281111562000e225762000e22620040cd565b0217905550602082015160018201556040909101516002909101805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0390921691909117905550505050565b600062000e7862001e05565b600554604080518082019091526001815260f860020a603702602082015284919062000ea8908390839062001e5d565b84600160006005838154811062000ec35762000ec36200469b565b600091825260209091206009909102016005015460a060020a900460ff16600481111562000ef55762000ef5620040cd565b905062000f1082600481111562000ae25762000ae2620040cd565b600062000f1d8962002271565b805160e0015190915062000f3a90335b8360600151600162002a38565b62000f8f60016040518060400160405280600181526020017f3200000000000000000000000000000000000000000000000000000000000000815250600084602001515162002af1909392919063ffffffff16565b5060005b88518160ff161015620010c2576000898260ff168151811062000fba5762000fba6200469b565b602002602001015190506200104160006040518060400160405280600181526020017f380000000000000000000000000000000000000000000000000000000000000081525085602001518460ff16815181106200101c576200101c6200469b565b602002602001015160400151600160a060020a031662002b1e9092919063ffffffff16565b600083602001518260ff16815181106200105f576200105f6200469b565b6020026020010151600001519050620010798c8362002b3f565b836000015160a0015167ffffffffffffffff168167ffffffffffffffff161115620010aa57620010aa8c8262002bab565b50508080620010b99062004704565b91505062000f93565b50620010d089600262002c00565b507f3e1487bbb756f53171141096103d2b395d2c1cbe91cd7a53c7594c81d05097e98989604051620009f492919062004726565b6200110e62001cdb565b600055565b6200111d62001d51565b60005b8151811015620011ca5760006009600a60008585815181106200114757620011476200469b565b6020026020010151600160a060020a0316600160a060020a0316815260200190815260200160002054815481106200118357620011836200469b565b60009182526020909120600390910201805460ff19166001836002811115620011b057620011b0620040cd565b021790555080620011c18162004779565b91505062001120565b5050565b600080620011dc33620021cc565b60ff1611620012025760405160e560020a62461bcd028152600401620007ea9062004664565b600554604080518082019091526001815260f860020a603702602082015283919062001232908390839062001e5d565b6200123c62001e05565b8360026000600583815481106200125757620012576200469b565b600091825260209091206009909102016005015460a060020a900460ff166004811115620012895762001289620040cd565b9050620012a482600481111562000ae25762000ae2620040cd565b6000620012b18862002271565b3360008181526006602090815260408083208d8452909152812054929350909160ff1690506200134c60006040518060400160405280600181526020017f390000000000000000000000000000000000000000000000000000000000000081525085602001518460ff16815181106200132e576200132e6200469b565b602002602001015160600151151562002c6e9092919063ffffffff16565b8260200151516001036200137257620013678a600362002c00565b98505050506200142e565b8251606001516000906200138890600162004795565b60ff16600203620013a657506002620013a38b600362002c00565b99505b835160600151600290620013bc90600162004795565b60ff161015620013cd575060019850885b620013d98b8262002c80565b620013e58b8362002cc0565b82600160a060020a03167f125cc128025455cb458dc6ba80f03fcab9542337ffb7c6c798a2b3bc4d2fa20c8c6040516200142191815260200190565b60405180910390a2505050505b5050505050919050565b6200144262001d51565b60005b8151811015620011ca5760008282815181106200146657620014666200469b565b602090810291909101810151600160a060020a0381166000908152600a90925260409091205490915060016200149c83620029ed565b6002811115620014b057620014b0620040cd565b036200150157600260098281548110620014ce57620014ce6200469b565b60009182526020909120600390910201805460ff19166001836002811115620014fb57620014fb620040cd565b02179055505b50508080620015109062004779565b91505062001445565b6200152362001d51565b62000d1c600062002d2c565b6200153962003ca5565b600554604080518082019091526001815260f860020a603702602082015283919062001569908390839062001e5d565b620015748462002271565b949350505050565b6200158662001d51565b62000d1c62002d93565b60006200159c62001e05565b816003600060058381548110620015b757620015b76200469b565b600091825260209091206009909102016005015460a060020a900460ff166004811115620015e957620015e9620040cd565b90506200160482600481111562000ae25762000ae2620040cd565b600554604080518082019091526001815260f860020a603702602082015286919062001634908390839062001e5d565b6000620016418862002271565b805160e0015190915062001656903362000f2d565b6200166388600462002c00565b506000806200167a836000015160c0015162002dd3565b845160e00151600160a060020a039081166000908152600d6020908152604082205490880151600254959750939550821693620016ca93859390928892670de0b6b3a7640000890192166200211b565b6040518b81527f02244c8529cb95e213ee542e76e7776342b3dabd10203d01472bbf4441be89299060200160405180910390a15060019a9950505050505050505050565b336000818152600a602052604090205480620017705760405160e560020a62461bcd02815260206004820152600260248201527f32330000000000000000000000000000000000000000000000000000000000006044820152606401620007ea565b600981815481106200178657620017866200469b565b600091825260208083206003909202909101805460ff1916815560018101839055600201805473ffffffffffffffffffffffffffffffffffffffff19169055600160a060020a03939093168152600a909252506040812055565b6000620017ec62001e05565b336000908152600d6020526040902054600160a060020a03168062001895576003546040513391600160a060020a031690620018289062003d14565b600160a060020a03928316815291166020820152604001604051809103906000f0801580156200185c573d6000803e3d6000fd5b50336000908152600d60205260409020805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03831617905590505b600354620019a490600160a060020a031633836200199b670de0b6b3a76400006040518060400160405280600281526020017f31340000000000000000000000000000000000000000000000000000000000008152506000620019928c6040518060400160405280600281526020017f31340000000000000000000000000000000000000000000000000000000000008152506001620019896000546040518060400160405280600281526020017f3134000000000000000000000000000000000000000000000000000000000000815250600062001989620019753390565b600354600160a060020a0316903062002e63565b92919062002af1565b92919062002ef5565b92919062002f05565b50670de0b6b3a763ffff1990930192620019e689898989620019ce61ffff8b1662015180620046cd565b62ffffff168933620019e08b62002faf565b62003041565b91507f19cb863002dfd6c0c25bbc389f38108e7a792499c6dbf601f5086ca3cc9150068285838960405162001a1f9493929190620047b1565b60405180910390a150979650505050505050565b600554604080518082019091526001815260f860020a6037026020820152606091839162001a65908390839062001e5d565b6200157484620033a5565b62001a7a62001d51565b600c5460ff1662001ad15760405160e560020a62461bcd02815260206004820152600260248201527f31330000000000000000000000000000000000000000000000000000000000006044820152606401620007ea565b600c805460ff1690600062001ae683620047eb565b91906101000a81548160ff021916908360ff1602179055505062001b718484848460009290925560038054600160a060020a0392831673ffffffffffffffffffffffffffffffffffffffff1960ff90961660a060020a02861674ffffffffffffffffffffffffffffffffffffffffff1990921691909117179055600180549290911691909216179055565b50505050565b6009818154811062001b8857600080fd5b600091825260209091206003909102018054600182015460029092015460ff9091169250600160a060020a031683565b606062001bc462003491565b905090565b62001bd362001d51565b600160a060020a03811662001c545760405160e560020a62461bcd02815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401620007ea565b6200091a8162002d2c565b62001c6962001d51565b303181111562001c7857600080fd5b600082600160a060020a03168260405160006040518083038185875af1925050503d806000811462001cc7576040519150601f19603f3d011682016040523d82523d6000602084013e62001ccc565b606091505b5050905080620008c357600080fd5b6008546101009004600160a060020a0316600160a060020a031633600160a060020a03161462000d1c5760405160e560020a62461bcd02815260206004820152600260248201527f31370000000000000000000000000000000000000000000000000000000000006044820152606401620007ea565b600854600160a060020a0361010090910416331462000d1c5760405160e560020a62461bcd02815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620007ea565b620008c38260ff168460ff161082620038b8565b62001dd462001cdb565b6003805460ff90921660a060020a0274ff000000000000000000000000000000000000000019909216919091179055565b60085460ff161562000d1c5760405160e560020a62461bcd02815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401620007ea565b620008c38284111582620038b8565b600554604080518082019091526001815260f860020a60370260208201526000918291829160609186919062001ea6908390839062001e5d565b600062001eb38862002271565b905080602001519350806000015160c00151965062001f24816000015160e001516040518060400160405280600181526020017f330000000000000000000000000000000000000000000000000000000000000081525033600160a060020a0316620038dd9092919063ffffffff16565b80516101000151600390600481111562001f425762001f42620040cd565b60ff161062001f975760405160e560020a62461bcd02815260206004820152600260248201527f31360000000000000000000000000000000000000000000000000000000000006044820152606401620007ea565b600281516101000151600481111562001fb45762001fb4620040cd565b148062001fe8575080516080015162001fd190620151806200480b565b67ffffffffffffffff164267ffffffffffffffff16115b15620020385760035460a060020a900460ff1680156200203657600060646200201560ff84168b62004836565b62002021919062004850565b98899003986064600f82020498508890039650505b505b600588815481106200204e576200204e6200469b565b600091825260208220600990910201805460ff1916815590818162002077600183018262003d22565b6200208760028301600062003d22565b5060038101805470ffffffffffffffffffffffffffffffffff191690556000600482018190556005909101805474ffffffffffffffffffffffffffffffffffffffffff19169055620020de90600684019062003d61565b620020ee60078301600062003d84565b50600801805473ffffffffffffffffffffffffffffffffffffffff19169055509496939550919350919050565b620021c486632d5378e17c01000000000000000000000000000000000000000000000000000000000287878787876040516024016200215f95949392919062004876565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152620038fd565b505050505050565b6001546040517fafe7b302000000000000000000000000000000000000000000000000000000008152600160a060020a038381166004830152600092169063afe7b30290602401602060405180830381865afa15801562002231573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620022579190620048b8565b92915050565b620008c38260ff168460ff161482620038b8565b6200227b62003ca5565b600582815481106200229157620022916200469b565b60009182526020909120604080516101a081019091526009909202018054829060808201908390829060ff166002811115620022d157620022d1620040cd565b6002811115620022e557620022e5620040cd565b8152602001600182018054620022fb90620048d8565b80601f01602080910402602001604051908101604052809291908181526020018280546200232990620048d8565b80156200237a5780601f106200234e576101008083540402835291602001916200237a565b820191906000526020600020905b8154815290600101906020018083116200235c57829003601f168201915b505050505081526020016002820180546200239590620048d8565b80601f0160208091040260200160405190810160405280929190818152602001828054620023c390620048d8565b8015620024145780601f10620023e85761010080835404028352916020019162002414565b820191906000526020600020905b815481529060010190602001808311620023f657829003601f168201915b5050509183525050600382015460ff808216602084015267ffffffffffffffff6101008304811660408501526901000000000000000000909204909116606083015260048084015460808401526005840154600160a060020a03811660a085015260c09093019260a060020a900490911690811115620024985762002498620040cd565b6004811115620024ac57620024ac620040cd565b81525050815260200160068201805480602002602001604051908101604052809291908181526020016000905b82821015620025715760008481526020908190206040805160a08101825260038602909201805467ffffffffffffffff16835260018082015484860152600290910154600160a060020a0381169284019290925260ff60a060020a83048116151560608501527501000000000000000000000000000000000000000000909204909116151560808301529083529092019101620024d9565b50505050815260200160078201805480602002602001604051908101604052809291908181526020016000905b8282101562002654578382906000526020600020018054620025c090620048d8565b80601f0160208091040260200160405190810160405280929190818152602001828054620025ee90620048d8565b80156200263f5780601f1062002613576101008083540402835291602001916200263f565b820191906000526020600020905b8154815290600101906020018083116200262157829003601f168201915b5050505050815260200190600101906200259e565b5050509082525060089190910154600160a060020a031660209091015292915050565b6001546040517fe4da53e8000000000000000000000000000000000000000000000000000000008152600160a060020a038381166004830152600092169063e4da53e890602401602060405180830381865afa158015620026dc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002702919062004917565b905080600103620008c35760045415620008c35760045460408051808201909152600181527f34000000000000000000000000000000000000000000000000000000000000006020820152620008c391859162001e5d565b60006200276782620021cc565b90508060ff166001036200284857600160a060020a03821660009081526007602052604081205467ffffffffffffffff1690819003620027da57600160a060020a0383166000908152600760205260409020805467ffffffffffffffff19164267ffffffffffffffff1617905562002846565b620027e981624f1a006200480b565b67ffffffffffffffff164210620028465760405160e560020a62461bcd02815260206004820152600260248201527f31300000000000000000000000000000000000000000000000000000000000006044820152606401620007ea565b505b8060ff16600003620011ca5760405160e560020a62461bcd028152600401620007ea9062004664565b6200287d8484620039ec565b50600583815481106200289457620028946200469b565b600091825260208083206040805160a08101825267ffffffffffffffff9788168152808401968752600160a060020a03998a169181019182526060810186815260808201878152600660099097029094019590950180546001818101835591885294909620905160039094020180549390971667ffffffffffffffff1990931692909217865593519285019290925590516002909301805491519251151575010000000000000000000000000000000000000000000275ff0000000000000000000000000000000000000000001993151560a060020a0274ffffffffffffffffffffffffffffffffffffffffff19909316949096169390931717169290921790915550565b620029a362003a35565b6008805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b604051600160a060020a03909116815260200160405180910390a1565b600160a060020a0381166000908152600a6020526040812054600980548290811062002a1d5762002a1d6200469b565b600091825260209091206003909102015460ff169392505050565b600084600160a060020a031684600160a060020a03160362002a58575060015b8015801562002a645750815b1562002a9857600160a060020a0383161562002a985782600160a060020a031684600160a060020a03160362002a98575060015b8062002aea5760405160e560020a62461bcd02815260206004820152600260248201527f31350000000000000000000000000000000000000000000000000000000000006044820152606401620007ea565b5050505050565b600062002b028486101584620038b8565b60ff82161562002b13578362002b15565b845b95945050505050565b620008c382600160a060020a031684600160a060020a0316141582620038b8565b60016005838154811062002b575762002b576200469b565b90600052602060002090600902016006018260ff168154811062002b7f5762002b7f6200469b565b906000526020600020906003020160020160156101000a81548160ff0219169083151502179055505050565b806005838154811062002bc25762002bc26200469b565b906000526020600020906009020160000160030160096101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505050565b6000816005848154811062002c195762002c196200469b565b60009182526020909120600560099092020101805474ff0000000000000000000000000000000000000000191660a060020a83600481111562002c605762002c60620040cd565b021790555060019392505050565b620008c38215158415151482620038b8565b806005838154811062002c975762002c976200469b565b60009182526020909120600990910201600301805460ff191660ff929092169190911790555050565b60016005838154811062002cd85762002cd86200469b565b90600052602060002090600902016006018260ff168154811062002d005762002d006200469b565b906000526020600020906003020160020160146101000a81548160ff0219169083151502179055505050565b60088054600160a060020a0383811661010081810274ffffffffffffffffffffffffffffffffffffffff001985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b62002d9d62001e05565b6008805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258620029d03390565b600080670de0b6b3a764000083101562002e335760405160e560020a62461bcd02815260206004820152601460248201527f496e76616c69642067726f737320616d6f756e740000000000000000000000006044820152606401620007ea565b606462002e4284600562004836565b62002e4e919062004850565b905062002e5c818462004931565b9150915091565b6040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152600160a060020a03838116600483015282811660248301526000919085169063dd62ed3e90604401602060405180830381865afa15801562002ecf573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001574919062004917565b600062002b0284861184620038b8565b6000841562002b13576040517f23b872dd000000000000000000000000000000000000000000000000000000008152600160a060020a0384811660048301528381166024830152604482018790528516906323b872dd906064016020604051808303816000875af115801562002f7f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002fa5919062004947565b62002b1357600080fd5b6009546000908210620030085760405160e560020a62461bcd02815260206004820152600260248201527f32310000000000000000000000000000000000000000000000000000000000006044820152606401620007ea565b600982815481106200301e576200301e6200469b565b6000918252602090912060026003909202010154600160a060020a031692915050565b600060038960ff16106200309b5760405160e560020a62461bcd02815260206004820152600260248201527f31390000000000000000000000000000000000000000000000000000000000006044820152606401620007ea565b50600580546001810182556000919091526040805161012081019091528060ff8b166002811115620030d157620030d1620040cd565b6002811115620030e557620030e5620040cd565b8152602001620030f58a62003a8c565b8152602001620031058862003a8c565b8152600060208201526040014267ffffffffffffffff90811682528716602082015260408101869052600160a060020a03851660608201526080016001815250600582815481106200315b576200315b6200469b565b6000918252602090912082516009909202018054909190829060ff191660018360028111156200318f576200318f620040cd565b021790555060208201516001820190620031aa9082620049b5565b5060408201516002820190620031c19082620049b5565b506060820151600382018054608085015160a086015167ffffffffffffffff90811669010000000000000000000270ffffffffffffffff000000000000000000199190921661010090810268ffffffffffffffffff1990941660ff90961695909517929092179190911617905560c083015160048084019190915560e0840151600584018054600160a060020a0390921673ffffffffffffffffffffffffffffffffffffffff198316811782559386015193909274ffffffffffffffffffffffffffffffffffffffffff19909216179060a060020a908490811115620032ab57620032ab620040cd565b02179055509050508160058281548110620032ca57620032ca6200469b565b906000526020600020906009020160080160006101000a815481600160a060020a030219169083600160a060020a0316021790555060005b87518160ff1610156200339857600582815481106200332557620033256200469b565b906000526020600020906009020160070162003360898360ff16815181106200335257620033526200469b565b602002602001015162003a8c565b81546001810183556000928352602090922090910190620033829082620049b5565b50806200338f8162004704565b91505062003302565b5098975050505050505050565b606060058281548110620033bd57620033bd6200469b565b9060005260206000209060090201600601805480602002602001604051908101604052809291908181526020016000905b82821015620034865760008481526020908190206040805160a08101825260038602909201805467ffffffffffffffff16835260018082015484860152600290910154600160a060020a0381169284019290925260ff60a060020a83048116151560608501527501000000000000000000000000000000000000000000909204909116151560808301529083529092019101620033ee565b505050509050919050565b60606005805480602002602001604051908101604052809291908181526020016000905b82821015620038af57600084815260209020604080516101a08101909152600984029091018054829060808201908390829060ff166002811115620034fe57620034fe620040cd565b6002811115620035125762003512620040cd565b81526020016001820180546200352890620048d8565b80601f01602080910402602001604051908101604052809291908181526020018280546200355690620048d8565b8015620035a75780601f106200357b57610100808354040283529160200191620035a7565b820191906000526020600020905b8154815290600101906020018083116200358957829003601f168201915b50505050508152602001600282018054620035c290620048d8565b80601f0160208091040260200160405190810160405280929190818152602001828054620035f090620048d8565b8015620036415780601f10620036155761010080835404028352916020019162003641565b820191906000526020600020905b8154815290600101906020018083116200362357829003601f168201915b5050509183525050600382015460ff808216602084015267ffffffffffffffff6101008304811660408501526901000000000000000000909204909116606083015260048084015460808401526005840154600160a060020a03811660a085015260c09093019260a060020a900490911690811115620036c557620036c5620040cd565b6004811115620036d957620036d9620040cd565b81525050815260200160068201805480602002602001604051908101604052809291908181526020016000905b828210156200379e5760008481526020908190206040805160a08101825260038602909201805467ffffffffffffffff16835260018082015484860152600290910154600160a060020a0381169284019290925260ff60a060020a8304811615156060850152750100000000000000000000000000000000000000000090920490911615156080830152908352909201910162003706565b50505050815260200160078201805480602002602001604051908101604052809291908181526020016000905b8282101562003881578382906000526020600020018054620037ed90620048d8565b80601f01602080910402602001604051908101604052809291908181526020018280546200381b90620048d8565b80156200386c5780601f1062003840576101008083540402835291602001916200386c565b820191906000526020600020905b8154815290600101906020018083116200384e57829003601f168201915b505050505081526020019060010190620037cb565b5050509082525060089190910154600160a060020a03166020918201529082526001929092019101620034b5565b50505050905090565b8082620008c35760405160e560020a62461bcd028152600401620007ea9190620046ef565b620008c382600160a060020a031684600160a060020a03161482620038b8565b600062003954826040518060400160405280601f81526020017f5361666543616c6c3a206c6f772d6c6576656c2063616c6c206661696c65640081525085600160a060020a031662003ab79092919063ffffffff16565b805190915015620008c3578080602001905181019062003975919062004947565b620008c35760405160e560020a62461bcd02815260206004820152602960248201527f5361666543616c6c3a204552433230206f7065726174696f6e20646964206e6f60448201527f74207375636365656400000000000000000000000000000000000000000000006064820152608401620007ea565b600080620039fa8362003ac8565b600160a060020a03851660009081526006602090815260408083208784529091529020805460ff831660ff1990911617905591505092915050565b60085460ff1662000d1c5760405160e560020a62461bcd02815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401620007ea565b60608160405160200162003aa19190620046ef565b6040516020818303038152906040529050919050565b606062001574848460008562003afa565b60006005828154811062003ae05762003ae06200469b565b600091825260209091206006600990920201015492915050565b6060303183111562003b785760405160e560020a62461bcd02815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401620007ea565b60008086600160a060020a0316858760405162003b96919062004a88565b60006040518083038185875af1925050503d806000811462003bd5576040519150601f19603f3d011682016040523d82523d6000602084013e62003bda565b606091505b509150915062003bed8783838762003bf8565b979650505050505050565b6060831562003c6f57825160000362003c6757600160a060020a0385163b62003c675760405160e560020a62461bcd02815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401620007ea565b508162001574565b62001574838381511562003c865781518083602001fd5b8060405160e560020a62461bcd028152600401620007ea9190620046ef565b604080516101a08101909152600060808201818152606060a0840181905260c084015260e0830182905261010083018290526101208301829052610140830182905261016083018290526101808301919091528190815260606020820181905260408201819052600091015290565b610b9a8062004aa783390190565b50805462003d3090620048d8565b6000825580601f1062003d41575050565b601f0160209004906000526020600020908101906200091a919062003da4565b50805460008255600302906000526020600020908101906200091a919062003dbf565b50805460008255906000526020600020908101906200091a919062003e09565b5b8082111562003dbb576000815560010162003da5565b5090565b5b8082111562003dbb57805467ffffffffffffffff191681556000600182015560028101805475ffffffffffffffffffffffffffffffffffffffffffff1916905560030162003dc0565b8082111562003dbb57600062003e20828262003d22565b5060010162003e09565b60006020828403121562003e3d57600080fd5b5035919050565b60ff811681146200091a57600080fd5b60006020828403121562003e6757600080fd5b813562003e748162003e44565b9392505050565b803561ffff8116811462003e8e57600080fd5b919050565b60008060006060848603121562003ea957600080fd5b8335925062003ebb6020850162003e7b565b9150604084013590509250925092565b8035600160a060020a038116811462003e8e57600080fd5b6000806040838503121562003ef757600080fd5b62003f028362003ecb565b946020939093013593505050565b60e060020a634e487b7102600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171562003f555762003f5562003f10565b604052919050565b600067ffffffffffffffff82111562003f7a5762003f7a62003f10565b5060209081020190565b6000806040838503121562003f9857600080fd5b8235915060208084013567ffffffffffffffff81111562003fb857600080fd5b8401601f8101861362003fca57600080fd5b803562003fe162003fdb8262003f5d565b62003f29565b8181529083028201830190838101908883111562003ffe57600080fd5b928401925b8284101562004029578335620040198162003e44565b8252928401929084019062004003565b80955050505050509250929050565b600060208083850312156200404c57600080fd5b823567ffffffffffffffff8111156200406457600080fd5b8301601f810185136200407657600080fd5b80356200408762003fdb8262003f5d565b81815290830282018301908381019087831115620040a457600080fd5b928401925b8284101562003bed57620040bd8462003ecb565b82529284019290840190620040a9565b60e060020a634e487b7102600052602160045260246000fd5b600381106200091a576200091a620040cd565b6200410481620040e6565b9052565b60005b83811015620041255781810151838201526020016200410b565b50506000910152565b600081518084526200414881602086016020860162004108565b601f01601f19169290920160200192915050565b60058110620041045762004104620040cd565b600081518084526020808501945080840160005b83811015620041e2578151805167ffffffffffffffff1688528381015184890152604080820151600160a060020a03169089015260608082015115159089015260809081015115159088015260a0909601959082019060010162004183565b509495945050505050565b600081518084526020808501808196508284028101915082860160005b8581101562004238578284038952620042258483516200412e565b988501989350908401906001016200420a565b5091979650505050505050565b60008151608084526200425d608085018251620040f9565b60208101516101208060a08701526200427b6101a08701836200412e565b91506040830151607f198784030160c08801526200429a83826200412e565b9250506060830151620042b260e088018260ff169052565b506080830151610100620042d18189018367ffffffffffffffff169052565b60a085015167ffffffffffffffff16928801929092525060c083015161014087015260e0830151600160a060020a031661016087015290910151906200431c6101808601836200415c565b6020840151915084810360208601526200433781836200416f565b91505060408301518482036040860152620043538282620041ed565b9150506060830151620043716060860182600160a060020a03169052565b509392505050565b60208152600062003e74602083018462004245565b600082601f830112620043a057600080fd5b813567ffffffffffffffff811115620043bd57620043bd62003f10565b620043d2601f8201601f191660200162003f29565b818152846020838601011115620043e857600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600080600060e0888a0312156200442157600080fd5b6200442d883562003e44565b87359650602088013567ffffffffffffffff808211156200444d57600080fd5b6200445b8b838c016200438e565b975060408a01359150808211156200447257600080fd5b818a0191508a601f8301126200448757600080fd5b81356200449862003fdb8262003f5d565b818152602091820284018201918101908d831115620044b657600080fd5b602085015b83811015620044f4578481351115620044d357600080fd5b620044e58f602083358901016200438e565b835260209283019201620044bb565b509850505060608a01359150808211156200450e57600080fd5b506200451d8a828b016200438e565b9450506200452e6080890162003e7b565b925060a0880135915060c0880135905092959891949750929550565b6000602082840312156200455d57600080fd5b62003e748262003ecb565b60208152600062003e7460208301846200416f565b600080600080608085870312156200459457600080fd5b8435620045a18162003e44565b935060208501359250620045b86040860162003ecb565b9150620045c86060860162003ecb565b905092959194509250565b60608101620045e285620040e6565b9381526020810192909252600160a060020a031660409091015290565b600060208083018184528085518083526040860191506040848202870101925083870160005b828110156200465757603f198886030184526200464485835162004245565b9450928501929085019060010162004625565b5092979650505050505050565b60208082526001908201527f3100000000000000000000000000000000000000000000000000000000000000604082015260600190565b60e060020a634e487b7102600052603260045260246000fd5b60e060020a634e487b7102600052601160045260246000fd5b62ffffff81811683821602808216919082811462000d005762000d00620046b4565b60208152600062003e7460208301846200412e565b600060ff821660ff81036200471d576200471d620046b4565b60010192915050565b6000604082018483526020604081850152818551808452606086019150828701935060005b818110156200476c57845160ff16835293830193918301916001016200474b565b5090979650505050505050565b6000600182016200478e576200478e620046b4565b5060010190565b60ff8181168382160190811115620022575762002257620046b4565b848152836020820152600160a060020a0383166040820152608060608201526000620047e160808301846200412e565b9695505050505050565b600060ff821680620048015762004801620046b4565b6000190192915050565b67ffffffffffffffff8181168382160190808211156200482f576200482f620046b4565b5092915050565b8082028115828204841417620022575762002257620046b4565b600082620048715760e060020a634e487b7102600052601260045260246000fd5b500490565b60a0815260006200488b60a08301886200416f565b9050856020830152846040830152836060830152600160a060020a03831660808301529695505050505050565b600060208284031215620048cb57600080fd5b815162003e748162003e44565b600281046001821680620048ed57607f821691505b602082108103620049115760e060020a634e487b7102600052602260045260246000fd5b50919050565b6000602082840312156200492a57600080fd5b5051919050565b81810381811115620022575762002257620046b4565b6000602082840312156200495a57600080fd5b8151801515811462003e7457600080fd5b601f821115620008c3576000818152602081206020601f86010481016020861015620049945750805b6020601f860104820191505b81811015620021c457828155600101620049a0565b815167ffffffffffffffff811115620049d257620049d262003f10565b620049ea81620049e38454620048d8565b846200496b565b602080601f83116001811462004a26576000841562004a095750858301515b60028086026008870290910a6000190419821617865550620021c4565b600085815260208120601f198616915b8281101562004a575788860151825594840194600190910190840162004a36565b508582101562004a7857878501516008601f88160260020a60001904191681555b5050505050600202600101905550565b6000825162004a9c81846020870162004108565b919091019291505056fe608060405234801561001057600080fd5b50604051610b9a380380610b9a83398101604081905261002f916100f6565b610051610043640100000000610086810204565b64010000000061008a810204565b6001805560048054600160a060020a03938416600160a060020a03199182161790915560058054929093169116179055610129565b3390565b60008054600160a060020a03838116600160a060020a0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8051600160a060020a03811681146100f157600080fd5b919050565b6000806040838503121561010957600080fd5b610112836100da565b9150610120602084016100da565b90509250929050565b610a62806101386000396000f3fe6080604052600436106100b2576000357c01000000000000000000000000000000000000000000000000000000009004806350188301116100765780635018830114610184578063715018a61461019a5780638da5cb5b146101b1578063f2fde38b146101cf578063f7462b2f146101ef57600080fd5b80631fccf672146100be5780632d5378e1146100fb5780632edd8b4d1461012b5780633b92f3df1461014f5780633ccfd60b1461017c57600080fd5b366100b957005b600080fd5b3480156100ca57600080fd5b506005546100de90600160a060020a031681565b604051600160a060020a0390911681526020015b60405180910390f35b34801561010757600080fd5b5061011b610116366004610811565b61020f565b60405190151581526020016100f2565b34801561013757600080fd5b5061014160035481565b6040519081526020016100f2565b34801561015b57600080fd5b5061014161016a36600461094b565b60066020526000908152604090205481565b61011b61038c565b34801561019057600080fd5b5061014160025481565b3480156101a657600080fd5b506101af61042b565b005b3480156101bd57600080fd5b50600054600160a060020a03166100de565b3480156101db57600080fd5b506101af6101ea36600461094b565b61043f565b3480156101fb57600080fd5b506004546100de90600160a060020a031681565b60006102196104d2565b600061022361052f565b875190915060006102348289610986565b905061024087896109ab565b8310156102975760405160e560020a62461bcd02815260206004820152601960248201527f547275737465653a2042616c616e63657320746f6f206c6f770000000000000060448201526064015b60405180910390fd5b86156102a7576102a785886105ce565b871561032b5760005b828110156103295760008a82815181106102cc576102cc6109c4565b6020026020010151604001519050826006600083600160a060020a0316600160a060020a03168152602001908152602001600020600082825461030f91906109ab565b909155508291506103219050816109dd565b9150506102b0565b505b851561037d578560066000610348600454600160a060020a031690565b600160a060020a0316600160a060020a03168152602001908152602001600020600082825461037791906109ab565b90915550505b50600198975050505050505050565b60006103966106bb565b33600081815260066020526040902054806103f65760405160e560020a62461bcd02815260206004820152601c60248201527f547275737465653a204e6f7468696e6720746f20776974686472617700000000604482015260640161028e565b600160a060020a03821660009081526006602052604081205561041982826105ce565b60019250505061042860018055565b90565b6104336104d2565b61043d6000610717565b565b6104476104d2565b600160a060020a0381166104c65760405160e560020a62461bcd02815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161028e565b6104cf81610717565b50565b600054600160a060020a0316331461043d5760405160e560020a62461bcd02815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161028e565b600080610544600554600160a060020a031690565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152909150600160a060020a038216906370a0823190602401602060405180830381865afa1580156105a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c891906109f6565b91505090565b600554600160a060020a03166040517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a03848116600483015260248201849052919091169063a9059cbb906044016020604051808303816000875af1158015610644573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106689190610a0f565b6106b75760405160e560020a62461bcd02815260206004820152601a60248201527f547275737465653a205769746864726177616c206661696c6564000000000000604482015260640161028e565b5050565b6002600154036107105760405160e560020a62461bcd02815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161028e565b6002600155565b60008054600160a060020a0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60e060020a634e487b7102600052604160045260246000fd5b60405160a0810167ffffffffffffffff811182821017156107b0576107b0610774565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156107df576107df610774565b604052919050565b8035600160a060020a03811681146107fe57600080fd5b919050565b80151581146104cf57600080fd5b600080600080600060a080878903121561082a57600080fd5b863567ffffffffffffffff8082111561084257600080fd5b818901915089601f83011261085657600080fd5b813560208282111561086a5761086a610774565b61087781828402016107b6565b8281529185028401810191818101908d84111561089357600080fd5b948201945b838610156109195786868f0312156108b05760008081fd5b6108b861078d565b863586811681146108c95760008081fd5b8152868401358482015260406108e08189016107e7565b908201526060878101356108f381610803565b9082015260808781013561090681610803565b9082015282529486019490820190610898565b9a50508a0135975050506040880135945050506060860135915061093f608087016107e7565b90509295509295909350565b60006020828403121561095d57600080fd5b610966826107e7565b9392505050565b60e060020a634e487b7102600052601160045260246000fd5b6000826109a65760e060020a634e487b7102600052601260045260246000fd5b500490565b808201808211156109be576109be61096d565b92915050565b60e060020a634e487b7102600052603260045260246000fd5b6000600182016109ef576109ef61096d565b5060010190565b600060208284031215610a0857600080fd5b5051919050565b600060208284031215610a2157600080fd5b81516109668161080356fea264697066735822122048063781cf8ece44bb94d5cc222558989658f8177522fbb46e76a45b5cb9311464736f6c63430008130033a26469706673582212201bf4de1720ce19d383ee167095de049da7610c45864bc93104bf723929cea97464736f6c63430008130033",
  "devdoc": {
    "events": {
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "approveCompletion(uint256)": {
        "params": {
          "jobId": "- Job index."
        }
      },
      "approveRequests(uint256,uint8[])": {
        "details": "Hirer accepts request (s) to work on job.",
        "params": {
          "jobId": "- Job index",
          "selectedPositions": "- List of jobbers hirer accepts  to collaborate on the job. It should contain jobbers'  position Id. Note - Caller be the creator of job at jobId - Job must be open. - There must be requests greater than 0. It is assumed Hirer has scrutinized properly, the interests shown in job at  jobId, hence, proposed completion time of each collaborator is  evaluated, and that best satisfy the hirer's interest."
        }
      },
      "cancelJob(uint256)": {
        "details": "Cancels job offer @param jobId - {Job index} Note  - Caller must be the hirer of Job with valid JobId. - Caller must not be a contract address. For more info, see { Storage.sol - _removeJob }"
      },
      "constructor": {
        "details": "Initialized storage vars ",
        "params": {
          "_initializer": ": Used to set initial parameters.   The parameters can only be altered the number of times the _initializer was set."
        }
      },
      "getJobInfo(uint256)": {
        "details": "Read single job from storage.",
        "params": {
          "jobId": "- Job index"
        }
      },
      "getPosition(address,uint256)": {
        "details": "See { Storage - _getPosition} ",
        "params": {
          "jobId": "- Job index/position."
        }
      },
      "getRequests(uint256)": {
        "details": "Returns list of interested participants for a job ",
        "params": {
          "jobId": "- {job index} "
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "Halts contract execution  Note: Owner's privilege"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "postJob(uint8,string,string[],string,uint16,uint256,uint256)": {
        "details": "Posts new Job",
        "params": {
          "curatorId": ": On the frontend, curators are mapped to their respective ids, Hirers may add curator service or not.",
          "jobRef": "- Can be Job URL or any reference to the current job.",
          "offerPrice": ": The amount in stable coin the hirer is willing to pay for this job. Note - Hirer must have given approval to withdraw the offerPrice in cUSD, which must also be greater than minimum offer. Note : Payment currency is in cUSD. ",
          "proposedEndDateInDays": "- Expected duration to complete the job."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "requestToWork(uint256,uint16,uint256)": {
        "details": "Jobbers show interest to work on a particular job",
        "params": {
          "jobId": "- The Job id Jobber is applying for. An id not greater than the job array  length is expected.",
          "myBestPrice": "- Best price jobber will accept the job. This enables better negotiation thereby protecting the interests and rights of both parties. Note: Intending Jobber applying for this job must either be on probation or approved member.  ",
          "proposedCompletionDateInDays": "- Jobbers can propose completion date. This however should not be confused for that of the hirer. Hirer will eventually accept or reject the proposal date.  Note: The parameter \"proposedCompletionDateInDays\" should be in days e.g 7"
        }
      },
      "setCancellationRate(uint8)": {
        "details": "Reset cancellation fee. Note - Owner's privilege.",
        "params": {
          "newRate": "- Cancellation rate. Rate should not be greater than 100%."
        }
      },
      "submitAndSignCompletion(uint256)": {
        "details": "Utility to submit completed jobs. Note: We enforce strict rules that ensure caller is a  valid collaborator since position of any valid collaborator will always be greater than zero.  - If there is only one collaborator, we simply set  completion and exit the program. - If collaborator is more than one, we check that caller's  signature is not appended before now, otherwise the program reverts. Note If collaborator is more than one, then minimum of 2 signatures are required to  set job state to `completed`.",
        "params": {
          "jobId": "- Job index/position."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "Continues contract execution  Note: Owner's privilege"
      },
      "viewJobs()": {
        "details": "Read all jobs from storage."
      },
      "whitelistCurators(address[])": {
        "details": "Only Owner can whitelist curators. Such address must have been registered before the invocation can be  successful."
      },
      "withdraw(address,uint256)": {
        "details": "Withdraws from this contract if any. Note - Owner's privilege.",
        "params": {
          "amount": "- Amount to withdraw.",
          "to": "- Address to send funds to."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approveCompletion(uint256)": {
        "notice": "Hirer confirms and approve that job at jobId was completed and final. Note - Payment (less fee) is splitted among the jobbers. o Jobbers are able to withdraw payment from the trustee. o Rewards are minted to jobbers. Function is able to handle if there was collaboration or not."
      }
    },
    "notice": "ERROR CODE ---------- \"1\" : \"Not a member\". \"2\" : \"No interested participants yet\". \"4\" : \"Probation hit limit. \"6\" : \"Invalid caller\". \"7\" : \"Invalid entry\". \"8\" : \"Approval to zero address\". \"9\" : \"Already signed\". \"11\" : \"Insufficient value provided\". \"13\" : \"Time elapsed: Cannot initialize again\". \"14\" : \"Offer price less than minimumOffer\".  \"15\" : Only owner | curator. \"16\" : Low bal \"17\" : OnlyOwner",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1958,
        "contract": "contracts/main/HiWork.sol:HiWork",
        "label": "minimMumOffer",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1960,
        "contract": "contracts/main/HiWork.sol:HiWork",
        "label": "jobberContract",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1962,
        "contract": "contracts/main/HiWork.sol:HiWork",
        "label": "feeTo",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 1964,
        "contract": "contracts/main/HiWork.sol:HiWork",
        "label": "paymentCurrency",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 1967,
        "contract": "contracts/main/HiWork.sol:HiWork",
        "label": "cancellationRate",
        "offset": 20,
        "slot": "3",
        "type": "t_uint8"
      },
      {
        "astId": 1970,
        "contract": "contracts/main/HiWork.sol:HiWork",
        "label": "probationOfferLimit",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1974,
        "contract": "contracts/main/HiWork.sol:HiWork",
        "label": "jobs",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_struct(JobMetadata)3462_storage)dyn_storage"
      },
      {
        "astId": 1981,
        "contract": "contracts/main/HiWork.sol:HiWork",
        "label": "positions",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint8))"
      },
      {
        "astId": 1985,
        "contract": "contracts/main/HiWork.sol:HiWork",
        "label": "compliance",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint64)"
      },
      {
        "astId": 5961,
        "contract": "contracts/main/HiWork.sol:HiWork",
        "label": "_paused",
        "offset": 0,
        "slot": "8",
        "type": "t_bool"
      },
      {
        "astId": 6417,
        "contract": "contracts/main/HiWork.sol:HiWork",
        "label": "_owner",
        "offset": 1,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 2994,
        "contract": "contracts/main/HiWork.sol:HiWork",
        "label": "curators",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_struct(Curator)2990_storage)dyn_storage"
      },
      {
        "astId": 2998,
        "contract": "contracts/main/HiWork.sol:HiWork",
        "label": "curatorsId",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3004,
        "contract": "contracts/main/HiWork.sol:HiWork",
        "label": "isCurator",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 983,
        "contract": "contracts/main/HiWork.sol:HiWork",
        "label": "initializer",
        "offset": 0,
        "slot": "12",
        "type": "t_uint8"
      },
      {
        "astId": 987,
        "contract": "contracts/main/HiWork.sol:HiWork",
        "label": "trustees",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes_storage)dyn_storage": {
        "base": "t_bytes_storage",
        "encoding": "dynamic_array",
        "label": "bytes[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Curator)2990_storage)dyn_storage": {
        "base": "t_struct(Curator)2990_storage",
        "encoding": "dynamic_array",
        "label": "struct Curators.Curator[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(JobMetadata)3462_storage)dyn_storage": {
        "base": "t_struct(JobMetadata)3462_storage",
        "encoding": "dynamic_array",
        "label": "struct IJob.JobMetadata[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Jobber)3473_storage)dyn_storage": {
        "base": "t_struct(Jobber)3473_storage",
        "encoding": "dynamic_array",
        "label": "struct IJob.Jobber[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_enum(JobStatus)3347": {
        "encoding": "inplace",
        "label": "enum IJob.JobStatus",
        "numberOfBytes": "1"
      },
      "t_enum(JobType)3351": {
        "encoding": "inplace",
        "label": "enum IJob.JobType",
        "numberOfBytes": "1"
      },
      "t_enum(Status)2982": {
        "encoding": "inplace",
        "label": "enum Curators.Status",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint8))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint8))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint8)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_address,t_uint64)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint64)",
        "numberOfBytes": "32",
        "value": "t_uint64"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_uint8)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint8)",
        "numberOfBytes": "32",
        "value": "t_uint8"
      },
      "t_struct(Curator)2990_storage": {
        "encoding": "inplace",
        "label": "struct Curators.Curator",
        "members": [
          {
            "astId": 2985,
            "contract": "contracts/main/HiWork.sol:HiWork",
            "label": "status",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(Status)2982"
          },
          {
            "astId": 2987,
            "contract": "contracts/main/HiWork.sol:HiWork",
            "label": "id",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2989,
            "contract": "contracts/main/HiWork.sol:HiWork",
            "label": "addr",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(JobMetadata)3462_storage": {
        "encoding": "inplace",
        "label": "struct IJob.JobMetadata",
        "members": [
          {
            "astId": 3452,
            "contract": "contracts/main/HiWork.sol:HiWork",
            "label": "job",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Metadata)3449_storage"
          },
          {
            "astId": 3456,
            "contract": "contracts/main/HiWork.sol:HiWork",
            "label": "requests",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_struct(Jobber)3473_storage)dyn_storage"
          },
          {
            "astId": 3459,
            "contract": "contracts/main/HiWork.sol:HiWork",
            "label": "tags",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_bytes_storage)dyn_storage"
          },
          {
            "astId": 3461,
            "contract": "contracts/main/HiWork.sol:HiWork",
            "label": "curator",
            "offset": 0,
            "slot": "8",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(Jobber)3473_storage": {
        "encoding": "inplace",
        "label": "struct IJob.Jobber",
        "members": [
          {
            "astId": 3464,
            "contract": "contracts/main/HiWork.sol:HiWork",
            "label": "proposedJobEnd",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 3466,
            "contract": "contracts/main/HiWork.sol:HiWork",
            "label": "myBestPrice",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3468,
            "contract": "contracts/main/HiWork.sol:HiWork",
            "label": "identifier",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 3470,
            "contract": "contracts/main/HiWork.sol:HiWork",
            "label": "signed",
            "offset": 20,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 3472,
            "contract": "contracts/main/HiWork.sol:HiWork",
            "label": "acceptance",
            "offset": 21,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Metadata)3449_storage": {
        "encoding": "inplace",
        "label": "struct IJob.Metadata",
        "members": [
          {
            "astId": 3431,
            "contract": "contracts/main/HiWork.sol:HiWork",
            "label": "jobType",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(JobType)3351"
          },
          {
            "astId": 3433,
            "contract": "contracts/main/HiWork.sol:HiWork",
            "label": "title",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes_storage"
          },
          {
            "astId": 3435,
            "contract": "contracts/main/HiWork.sol:HiWork",
            "label": "jobRef",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes_storage"
          },
          {
            "astId": 3437,
            "contract": "contracts/main/HiWork.sol:HiWork",
            "label": "signature",
            "offset": 0,
            "slot": "3",
            "type": "t_uint8"
          },
          {
            "astId": 3439,
            "contract": "contracts/main/HiWork.sol:HiWork",
            "label": "datePosted",
            "offset": 1,
            "slot": "3",
            "type": "t_uint64"
          },
          {
            "astId": 3441,
            "contract": "contracts/main/HiWork.sol:HiWork",
            "label": "proposeEnd",
            "offset": 9,
            "slot": "3",
            "type": "t_uint64"
          },
          {
            "astId": 3443,
            "contract": "contracts/main/HiWork.sol:HiWork",
            "label": "offerPrice",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 3445,
            "contract": "contracts/main/HiWork.sol:HiWork",
            "label": "hirer",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 3448,
            "contract": "contracts/main/HiWork.sol:HiWork",
            "label": "jStatus",
            "offset": 20,
            "slot": "5",
            "type": "t_enum(JobStatus)3347"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}