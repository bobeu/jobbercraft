{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/IERC20.sol\";\n"
    },
    "@openzeppelin/contracts/interfaces/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC721/IERC721.sol\";\n"
    },
    "@openzeppelin/contracts/interfaces/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC721/extensions/IERC721Metadata.sol\";\n"
    },
    "@openzeppelin/contracts/interfaces/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC721/IERC721Receiver.sol\";\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/main/interfaces/ICommon.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.19;\r\n\r\ninterface ICommon {\r\n    /**@dev Categories of jobber.  */\r\n  enum Tier { NONE, PROBATION, APPROVED }\r\n\r\n  struct Membership {\r\n    Tier status;\r\n    uint avatarId;\r\n    JobberData other;\r\n  }\r\n\r\n  // membership\r\n  struct MembershipBase {\r\n    uint probFee;\r\n    address approver;\r\n    address probationer;\r\n    address upgrader;\r\n  }\r\n\r\n  struct JobberData {\r\n    bytes name;\r\n    bytes aka;\r\n    bytes field;\r\n    bytes profileURI;\r\n    bytes avatar;\r\n    uint8 ratings;\r\n  }\r\n  \r\n}"
    },
    "contracts/main/interfaces/IJob.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.19;\r\n\r\nimport \"./ICommon.sol\";\r\n\r\ninterface IJob {\r\n  error InvalidSelector(uint8);\r\n\r\n  event CompletedJob(uint jobId, uint newSpotId, address indexed _trustee, address indexed hirer);\r\n  event JobCanceled(uint jobId, uint amountRefundToHirer, uint amountPaidToJobbers);\r\n  event JobCreated(uint jobId, uint offer, address trustee, string detail);\r\n  event WorkRequested(\r\n    uint jobId, \r\n    address indexed jobber, \r\n    uint actualOffer, \r\n    uint negotiatedPrice, \r\n    uint proposedCompletionDateInDays\r\n  );\r\n  event RequestApproved(uint jobId, uint8[] jobbers);\r\n  event Submission(uint jobId, address indexed jobber);\r\n  event JobCompleted(uint jobId);\r\n\r\n  /**@dev Steps of jobs. Each job inherits the {JobStatus.CLOSED} status by default which is \r\n    synchronous, and can only be in one step at any given time.  \r\n   */\r\n  enum JobStatus { NULL, OPEN, TAKEN, COMPLETED, CLOSED }\r\n\r\n  // Job type\r\n  enum JobType { ONEOFF, PARTTIME, FULLTIME }\r\n\r\n  /**\r\n    @dev Camp all kinds of fees applicable.\r\n      o PROBATION: By jobbers on sign up.\r\n      o APPROVED: By jobbers while upgrading.\r\n      o CANCELLATION: Paid by Hirer for cancelling jobs that are already engaged.\r\n      o PLATFORMONCANCEL: In favor of the platform, computed on gross value of CANCELLATION.\r\n      o WITHDRAWAL: BY Jobbers as % of earning.\r\n  */\r\n  enum Fees { PROBATION, APPROVED, CANCELLATION, PLATFORMONCANCEL, WITHDRAWAL}\r\n\r\n  /**\r\n    @dev Post a new job. \r\n    @param jobRef - Link or any reference of type string to the job.\r\n    @param proposedEndDateInDays - Proposed/preferred assigned time to execute the job.\r\n    Note - Should be in days.\r\n  */\r\n\r\n  function postJob(\r\n    uint8 jobType,\r\n    string memory title,\r\n    string[] memory tags,\r\n    string memory jobRef, \r\n    uint16 proposedEndDateInDays, \r\n    uint offerPrice, \r\n    uint curatorId\r\n  ) external payable returns(uint jobId);\r\n  function requestToWork(uint256 jobId, uint16 proposedCompletionDateInDays, uint256 myBestPrice) external returns(bool);\r\n  function approveRequests(uint jobId, uint8[] memory selectedPositions) external returns(bool);\r\n  function submitAndSignCompletion(uint jobId) external returns(bool);\r\n  function approveCompletion(uint jobId) external returns(bool);\r\n  function cancelJob(uint jobId) external returns(bool);\r\n  // function becomeAJobber() external payable returns(bool);\r\n  function getJobInfo(uint jobId) external view returns(JobMetadata memory);\r\n\r\n  //Job's subdata type\r\n  struct Metadata {\r\n    JobType jobType;\r\n    bytes title;\r\n    bytes jobRef;\r\n    uint8 signature;\r\n    uint64 datePosted;\r\n    uint64 proposeEnd;\r\n    uint256 offerPrice;\r\n    address hirer;\r\n    JobStatus jStatus;\r\n  \r\n  }\r\n\r\n  //Job data type\r\n  struct JobMetadata {\r\n    Metadata job;\r\n    Jobber[] requests;\r\n    bytes[] tags;\r\n    address curator;\r\n  }\r\n\r\n  //Jobber's data type\r\n  struct Jobber {\r\n    uint64 proposedJobEnd;\r\n    uint256 myBestPrice;\r\n    address identifier;\r\n    bool signed;\r\n    bool acceptance;\r\n  }\r\n\r\n}\r\n"
    },
    "contracts/main/interfaces/ITrustee.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.19;\r\n\r\nimport \"./IJob.sol\";\r\n\r\ninterface ITrustee {\r\n  error NothingToWithdraw();\r\n\r\n  function splitPayment(\r\n    IJob.Jobber[] memory tos, \r\n    uint netPay,\r\n    uint fee,\r\n    uint refundable,\r\n    address feeTo\r\n  ) external returns(bool);\r\n\r\n  function withdraw() external payable returns(bool);\r\n}"
    },
    "contracts/main/jobbers/IJobbers.sol": {
      "content": "// SPDX-License-Identifier: MIT \r\n\r\npragma solidity 0.8.19;\r\n\r\nimport \"../interfaces/ICommon.sol\";\r\n\r\ninterface IJobbers {\r\n  event MembershipUpgraded(address indexed who);\r\n  event MembershipDowngraded(address indexed who);\r\n\r\n  function becomeAJobber(\r\n    string memory name,\r\n    string memory aka,\r\n    string memory field,\r\n    string memory profileURI,\r\n    string memory avatar\r\n  ) external payable returns(bool);\r\n  function queryStatus(address target) external view returns(uint8);\r\n  function getAvatarInfo(address jobber) external view returns(uint);\r\n  function updateProfileInfo(string memory field, string memory profileURI, string memory avatar) external returns(bool);\r\n}"
    },
    "contracts/main/jobbers/Jobbers.sol": {
      "content": "// SPDX-License-Identifier: MIT \r\n\r\npragma solidity 0.8.19;\r\n\r\nimport \"./IJobbers.sol\";\r\nimport \"../../utils/Lib.sol\";\r\nimport \"../../../node_modules/@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"../../../node_modules/@openzeppelin/contracts/security/Pausable.sol\";\r\nimport \"../../tokens/erc721/interfaces/IERC721Extended.sol\";\r\nimport \"../../../node_modules/@openzeppelin/contracts/utils/Address.sol\";\r\nimport \"../../../node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\ncontract Jobbers is IJobbers, Ownable, Pausable {\r\n  using Address for address;\r\n  using Lib for *;\r\n\r\n  //Members count\r\n  uint256 public counter;\r\n\r\n  // Required fee to update profile\r\n  uint256 public updateFee;\r\n\r\n  //Account to receive fee\r\n  address public feeTo;\r\n\r\n  // Fee denominated in cUSD\r\n  IERC20 public feeDenom;\r\n\r\n  ///@dev Membership controller\r\n  ICommon.MembershipBase public mShip;\r\n\r\n  ///@dev Membership zone\r\n  mapping (address => uint) public ids;\r\n\r\n  ICommon.Membership[] private jobbers;\r\n\r\n  modifier checkmate(bool condition, string memory errorMessage) {\r\n    require(condition, errorMessage);\r\n    _;\r\n  }\r\n\r\n  modifier onlyApprovedOrOwner() {\r\n    require(\r\n      mShip.upgrader != address(0) &&\r\n      (_msgSender() == mShip.upgrader ||\r\n      _msgSender() == owner()),\r\n    \"Not authorized\"\r\n   );\r\n    _;\r\n  }\r\n\r\n  /**@dev We made an initial push to the jobbers array. This is to ensure \r\n    any unregistered user have a default id of 0.\r\n   */\r\n  constructor(\r\n    address _feeTo,\r\n    address _probationer, \r\n    address _approver,\r\n    address _upgrader,\r\n    IERC20 _feeDenom\r\n  ) { \r\n    mShip.upgrader = _upgrader; \r\n    feeTo = _feeTo;\r\n    jobbers.push();\r\n    updateFee = 50 ether;\r\n    _initialize(1e17 wei, _probationer, _approver, _upgrader, _feeDenom);\r\n  }\r\n\r\n  receive() external payable {}\r\n\r\n  function _initialize (uint _probFee, address _probationer, address _approver, address _upgrader, IERC20 _feeDenom) private {\r\n    mShip = ICommon.MembershipBase(_probFee, _approver, _probationer, _upgrader);\r\n    feeDenom = _feeDenom;\r\n  }\r\n\r\n  function _getId(address target) internal view returns(uint _return) {\r\n    _return = jobbers[ids[target]].avatarId;\r\n  }\r\n\r\n  /**@dev Internal - Returns membership status of caller\r\n    @param target - Address of caller\r\n  */\r\n  function _status(address target) internal virtual view returns(ICommon.Tier _return) {\r\n    _return = jobbers[ids[target]].status;\r\n  }\r\n\r\n  /**@dev View - Returns membership status of caller\r\n    Using an array of string literal in memory, we\r\n    return membership status.\r\n   */\r\n  function myStatus() public view returns(string memory) \r\n  {\r\n    string[3] memory str = [\"None\", \"Probation\", \"Approved\"];\r\n    uint8 idx = uint8(_status(_msgSender()));\r\n    return str[idx];\r\n  }\r\n\r\n  function queryStatus(address target) external view returns(uint8) {\r\n    return uint8(_status(target));\r\n  }\r\n\r\n  /**\r\n  @dev Signs up 'target'\r\n      @notice When jobbers sign up, Probation membership NFT is minted to the 'target' address. \r\n  */\r\n  function _signUp(\r\n    address target,\r\n    string memory name,\r\n    string memory aka,\r\n    string memory field,\r\n    string memory profileURI,\r\n    string memory avatar\r\n\r\n  ) private checkmate(_status(target) == ICommon.Tier.NONE, \"Already signed up\"){\r\n    counter ++;\r\n    uint id = counter;\r\n    IERC721Extended(mShip.probationer).mint(target, id);\r\n    ids[target] = id;\r\n    jobbers.push(\r\n      ICommon.Membership(\r\n        ICommon.Tier.PROBATION,\r\n        id,\r\n        ICommon.JobberData(\r\n          name.encode(),\r\n          aka.encode(),\r\n          field.encode(),\r\n          profileURI.encode(),\r\n          avatar.encode(),\r\n          0\r\n        ) \r\n      )\r\n    );\r\n  }\r\n\r\n  function _checkAndWithdrawFee(address caller, uint probFee) private {\r\n    address cUSD = address(feeDenom);\r\n    cUSD\r\n      .getAllowance(caller, address(this))\r\n        .uint256GE(probFee, 'Allowance not enough', 1)\r\n          .spendAllowance(cUSD, caller, feeTo);\r\n  }\r\n\r\n  /**\r\n  @dev User sign up to be probation member.\r\n    o Caller's current membership status must be null.\r\n    o Must send along with call the sufficient value for signup fee.\r\n    Note: Fee is denominated in stablecoin e.g cUSD\r\n  */\r\n  function becomeAJobber(\r\n    string memory name,\r\n    string memory aka,\r\n    string memory field,\r\n    string memory profileURI,\r\n    string memory avatar\r\n  ) external payable whenNotPaused returns(bool) {\r\n    address caller = _msgSender();\r\n    _checkAndWithdrawFee(caller, mShip.probFee);\r\n    _signUp(caller, name, aka, field, profileURI, avatar);\r\n    return true;\r\n  }\r\n\r\n  /**@dev Jobbers can only update field, profileURI and avatar after sign up\r\n    It costs them something to do so\r\n   */\r\n  function updateProfileInfo(string memory field, string memory profileURI, string memory avatar) public override returns(bool) {\r\n    address caller = _msgSender();\r\n    uint id = ids[caller];\r\n    jobbers[id].other.field = field.encode();\r\n    jobbers[id].other.profileURI = profileURI.encode();\r\n    jobbers[id].other.avatar = avatar.encode();\r\n    _checkAndWithdrawFee(caller, updateFee);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n    @dev Upgrade 'target' from probation to Approved member.\r\n      @param target - address to upgrade.\r\n      Note - 'target' must already be on probation before now.\r\n   */\r\n  function _upgrade(address target) private checkmate(_status(target) == ICommon.Tier.PROBATION,\"Not on probation\"){\r\n    uint id = _getId(target);\r\n    IERC721Extended(mShip.approver).mint(target, id);\r\n    IERC721Extended(mShip.probationer).burn(id);\r\n    jobbers[ids[target]].status = ICommon.Tier.APPROVED;\r\n  }\r\n\r\n    /**\r\n    @dev Downgrade 'target' from Approved member to probation.\r\n      @param target - address of target to downgrade.\r\n      Note - 'target' must already be an approved member before now.\r\n   */\r\n  function _downgrade(address target) private checkmate(_getId(target) > 0, \"18\"){\r\n    ICommon.Membership memory _m = jobbers[ids[target]];\r\n    uint id = _getId(target);\r\n    ICommon.Tier newStatus;\r\n    if(_m.status == ICommon.Tier.APPROVED) {\r\n      newStatus = ICommon.Tier.PROBATION;\r\n      require(\r\n        IERC721Extended(mShip.approver).burn(id) &&\r\n        IERC721Extended(mShip.probationer).mint(target, id),\r\n        \"21\"\r\n      );\r\n    }\r\n\r\n    if(_m.status == ICommon.Tier.PROBATION) {\r\n      newStatus = ICommon.Tier.NONE;\r\n      id = 0;\r\n      IERC721Extended(mShip.probationer).burn(id);\r\n    }\r\n\r\n    jobbers[id].avatarId = id;\r\n    jobbers[id].status = newStatus;\r\n\r\n  }\r\n\r\n    // Set Miscellaneous\r\n  function updateMembershipInfo(\r\n    uint _probFee,\r\n    address _approver,\r\n    address _probationer,\r\n    address _upgrader,\r\n    IERC20 _feeDenom,\r\n    uint _updateFee\r\n  ) public onlyOwner {\r\n    updateFee = _updateFee;\r\n    _initialize(_probFee, _probationer, _approver, _upgrader, _feeDenom);\r\n  }\r\n\r\n  function pauseAvatarContract(uint8 selector) public onlyOwner {\r\n    address[2] memory nfts = [mShip.probationer, mShip.approver];\r\n    IERC721Extended(nfts[selector]).pause();\r\n  }\r\n\r\n  function unpauseAvatarContract(uint8 selector) public onlyOwner {\r\n    address[2] memory nfts = [mShip.probationer, mShip.approver];\r\n    IERC721Extended(nfts[selector]).unpause();\r\n  }\r\n\r\n    /**\r\n    @dev Upgrade or downgrade'target'\r\n      o 'target' must be the probation member.\r\n      o Upgrader must be approved client.\r\n   */\r\n  function upgradeOrDowngradeUser(address target, uint8 upgrade_) public whenNotPaused onlyApprovedOrOwner {\r\n    if(upgrade_ == 1) {\r\n      _upgrade(target);\r\n      emit MembershipUpgraded(target);\r\n    } else {\r\n      _downgrade(target);\r\n      emit MembershipDowngraded(target);\r\n    }\r\n  }\r\n\r\n  function withdraw(address to, address erc20, uint amount) public onlyOwner() {\r\n    if(to != address(0)) {\r\n      if(erc20 != address(0) && erc20.isContract()) {\r\n        require(IERC20(erc20).transfer(to, amount), \"ERC20 Transfer failed\");\r\n      } else {\r\n        (bool s,) = to.call{value: amount}('');\r\n        require(s, 'Value Transfer failed.');\r\n      }\r\n    }\r\n  }\r\n\r\n  function getJobbers() public view returns(ICommon.Membership[] memory _return) {\r\n    _return = jobbers;\r\n    return _return;\r\n  }\r\n\r\n  function getAvatarInfo(\r\n    address jobber\r\n  ) external view returns(uint) {\r\n    return IERC721(mShip.probationer).balanceOf(jobber); \r\n  }\r\n\r\n  function getAvatarId(address _of) public view returns(uint) {\r\n    return _getId(_of);\r\n  }\r\n\r\n}"
    },
    "contracts/tokens/erc721/interfaces/IERC721Extended.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity  0.8.19;\r\n\r\nimport \"../../../../node_modules/@openzeppelin/contracts/interfaces/IERC721.sol\";\r\nimport \"../../../../node_modules/@openzeppelin/contracts/interfaces/IERC721Receiver.sol\";\r\nimport \"../../../../node_modules/@openzeppelin/contracts/interfaces/IERC721Metadata.sol\";\r\n\r\ninterface IERC721Extended is IERC721, IERC721Receiver, IERC721Metadata {\r\n  function pause() external;\r\n  function unpause() external;\r\n  function burn(uint256 tokenId) external returns(bool);\r\n  function mint(address to, uint256 tokenId) external returns(bool);\r\n}"
    },
    "contracts/utils/Lib.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.19;\r\n\r\nimport \"../main/interfaces/ITrustee.sol\";\r\nimport \"../../node_modules/@openzeppelin/contracts/interfaces/IERC20.sol\";\r\n\r\nlibrary Lib {\r\n  /**@dev Performs a double check with returned error messsage */\r\n  // function nestedCheck(\r\n  //   address actual, \r\n  //   address expected, \r\n  //   uint256 actual_1, \r\n  //   uint256 expected_1, \r\n  //   string memory errorMessage) \r\n  //     internal pure \r\n  // {\r\n  //   _compare(actual == expected, errorMessage);\r\n  //   _compare(actual_1 >= expected_1, errorMessage);\r\n  // }\r\n\r\n  /**@dev PPerform boolean equality operation */\r\n  function boolEq(bool actual, bool expected, string memory errorMessage) internal pure \r\n  {\r\n    _compare(actual == expected, errorMessage);\r\n  }\r\n\r\n  /**@dev Perform equality operation on uint256 typed data*/\r\n  function uint8Eq(uint8 actual, uint8 expected, string memory errorMessage) internal pure\r\n  {\r\n    _compare(actual == expected, errorMessage);\r\n  }\r\n\r\n  /**@dev Perform greater than or equals-to operation on uint8 typed data*/\r\n  function uint8Ge(uint8 actual, uint8 expected, string memory errorMessage) internal pure\r\n  {\r\n    _compare(actual >= expected, errorMessage);\r\n  }\r\n\r\n  /**@dev Perform greater-than operation on uint8 typed data*/\r\n  // function uint8G(uint8 actual, uint8 expected, string memory errorMessage) internal pure\r\n  // {\r\n  //   _compare(actual > expected, errorMessage);\r\n  // }\r\n\r\n  /**@dev Perform less-than operation on uint8 typed data*/\r\n  function uint8L(uint8 actual, uint8 expected, string memory errorMessage) internal pure \r\n  {\r\n    _compare(actual < expected, errorMessage);\r\n  }\r\n\r\n  /**@dev Perform equality operation on address typed data*/\r\n  function addressEq(address actual, address expected, string memory errorMessage) internal pure \r\n  {\r\n    _compare(actual == expected, errorMessage);\r\n  }\r\n\r\n  /**@dev Perform not-equals-to operation on address typed data*/\r\n  function addressNE(address actual, address expected, string memory errorMessage) internal pure \r\n  {\r\n    _compare(actual != expected, errorMessage);\r\n  }\r\n\r\n  /**@dev Perform equality operation on uint256 typed data*/\r\n  function uint256Eq(uint256 actual, uint256 expected, string memory errorMessage) internal pure \r\n  {\r\n    _compare(actual == expected, errorMessage);\r\n  }\r\n\r\n  /**@dev Perform greater than or equals-to operation on uint256 typed data*/\r\n  function uint256GE(uint256 actual, uint256 expected, string memory errorMessage, uint8 toReturn) internal pure returns(uint256 _return)\r\n  {\r\n    _compare(actual >= expected, errorMessage);\r\n    _return = toReturn == 0? actual : expected;\r\n  }\r\n\r\n  /**@dev Perform greater than operation on uint256 typed data*/\r\n  function uint256G(uint256 actual, uint256 expected, string memory errorMessage, uint8 toReturn) internal pure returns(uint256 _return) {\r\n    _compare(actual > expected, errorMessage);\r\n    _return = toReturn == 0? actual : expected;\r\n  }\r\n\r\n  /**@dev Performs a single check with returned error messsage*/\r\n  function uint256L(uint256 actual, uint256 expected, string memory errorMessage) internal pure \r\n  {\r\n    _compare(actual < expected, errorMessage);\r\n  }\r\n\r\n  /**@dev Perform less than or equals-to operation on uint256 typed data*/\r\n  function uint256LE(uint256 actual, uint256 expected, string memory errorMessage) internal pure \r\n  {\r\n    _compare(actual <= expected, errorMessage);\r\n  }\r\n\r\n  /**@dev Performs a single check with returned error messsage*/\r\n  function _compare(bool value, string memory errorMessage) internal pure \r\n  {\r\n    require(value, errorMessage);\r\n  }\r\n\r\n  /**@dev Performs a single check with returned error messsage*/\r\n  function getNetPay(uint256 grossPay) internal pure returns(uint256 _netPay, uint256 fee) {\r\n    require(grossPay >= 1 ether, \"Invalid gross amount\" );\r\n    fee = (grossPay * 5) / 100;\r\n    _netPay = grossPay - fee;\r\n  }\r\n\r\n  function getAllowance(address token, address owner, address beneficiary) internal view returns(uint allowance) {\r\n    allowance = IERC20(token).allowance(owner, beneficiary);\r\n  }\r\n\r\n  function spendAllowance(uint allowance, address token, address owner, address receiver) internal returns(uint _return) {\r\n    if(allowance > 0) {\r\n      require(IERC20(token).transferFrom(owner, receiver, allowance));\r\n    }\r\n    _return = allowance;\r\n  }\r\n\r\n  function encode(string memory arg) internal pure returns(bytes memory _return) {\r\n    _return = abi.encode(arg);\r\n  }\r\n\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "byzantium",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}